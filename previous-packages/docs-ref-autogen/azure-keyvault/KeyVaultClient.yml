### YamlMime:TSType
name: KeyVaultClient
uid: azure-keyvault.KeyVaultClient
package: azure-keyvault
summary: ''
fullName: KeyVaultClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: KeyVaultClient(ServiceClientCredentials, AzureServiceClientOptions)
    uid: azure-keyvault.KeyVaultClient.constructor
    package: azure-keyvault
    summary: Initializes a new instance of the KeyVaultClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new KeyVaultClient(credentials: ServiceClientCredentials, options?:
        AzureServiceClientOptions)
      parameters:
        - id: credentials
          type: ServiceClientCredentials
          description: Credentials needed for the client to connect to Azure.
        - id: options
          type: AzureServiceClientOptions
          description: The parameter options
properties:
  - name: acceptLanguage
    uid: azure-keyvault.KeyVaultClient.acceptLanguage
    package: azure-keyvault
    summary: ''
    fullName: acceptLanguage
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'acceptLanguage: string'
      return:
        description: ''
        type: string
  - name: apiVersion
    uid: azure-keyvault.KeyVaultClient.apiVersion
    package: azure-keyvault
    summary: ''
    fullName: apiVersion
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'apiVersion: string'
      return:
        description: ''
        type: string
  - name: credentials
    uid: azure-keyvault.KeyVaultClient.credentials
    package: azure-keyvault
    summary: ''
    fullName: credentials
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        description: ''
        type: ServiceClientCredentials
  - name: generateClientRequestId
    uid: azure-keyvault.KeyVaultClient.generateClientRequestId
    package: azure-keyvault
    summary: ''
    fullName: generateClientRequestId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'generateClientRequestId: boolean'
      return:
        description: ''
        type: boolean
  - name: longRunningOperationRetryTimeout
    uid: azure-keyvault.KeyVaultClient.longRunningOperationRetryTimeout
    package: azure-keyvault
    summary: ''
    fullName: longRunningOperationRetryTimeout
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'longRunningOperationRetryTimeout: number'
      return:
        description: ''
        type: number
inheritedMethods:
  - name: addUserAgentInfo(any)
    uid: azure-keyvault.KeyVaultClient.addUserAgentInfo
    package: azure-keyvault
    summary: Adds custom information to user agent header
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function addUserAgentInfo(additionalUserAgentInfo: any)'
      parameters:
        - id: additionalUserAgentInfo
          type: any
          description: information to be added to user agent header, as string.
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.addUserAgentInfo
  - name: >-
      getLongRunningOperationResult<TResult>(HttpOperationResponse<TResult>,
      RequestOptions)
    uid: azure-keyvault.KeyVaultClient.getLongRunningOperationResult_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getLongRunningOperationResult<TResult>(resultOfInitialRequest:
        HttpOperationResponse<TResult>, options?: RequestOptions):
        Promise<TResult>
      parameters:
        - id: resultOfInitialRequest
          type: HttpOperationResponse&lt;TResult&gt;
          description: ''
        - id: options
          type: RequestOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;TResult&gt;
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.getLongRunningOperationResult
  - name: >-
      getLongRunningOperationResult<TResult>(HttpOperationResponse<TResult>,
      RequestOptions, ServiceCallback<TResult>)
    uid: azure-keyvault.KeyVaultClient.getLongRunningOperationResult
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getLongRunningOperationResult<TResult>(resultOfInitialRequest:
        HttpOperationResponse<TResult>, options: RequestOptions, callback:
        ServiceCallback<TResult>)
      parameters:
        - id: resultOfInitialRequest
          type: HttpOperationResponse&lt;TResult&gt;
          description: ''
        - id: options
          type: RequestOptions
          description: ''
        - id: callback
          type: ServiceCallback&lt;TResult&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.getLongRunningOperationResult
  - name: >-
      getLongRunningOperationResult<TResult>(HttpOperationResponse<TResult>,
      ServiceCallback<TResult>)
    uid: azure-keyvault.KeyVaultClient.getLongRunningOperationResult_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getLongRunningOperationResult<TResult>(resultOfInitialRequest:
        HttpOperationResponse<TResult>, callback: ServiceCallback<TResult>)
      parameters:
        - id: resultOfInitialRequest
          type: HttpOperationResponse&lt;TResult&gt;
          description: ''
        - id: callback
          type: ServiceCallback&lt;TResult&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.getLongRunningOperationResult
  - name: getPackageJsonInfo(string)
    uid: azure-keyvault.KeyVaultClient.getPackageJsonInfo
    package: azure-keyvault
    summary: >-
      Attempts to find package.json for the given azure nodejs package.

      If found, returns the name and version of the package by reading the
      package.json

      If package.json is not found, returns a default value.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPackageJsonInfo(managementClientDir: string): { name:
        string, version: string }
      parameters:
        - id: managementClientDir
          type: string
          description: pass the directory of the specific azure management client.
      return:
        description: packageJsonInfo - "name" and "version" of the desired package.
        type: '{ name: string, version: string }'
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.getPackageJsonInfo
  - name: >-
      sendLongRunningRequest<TResult>(LongRunningUrlBasedRequestPrepareOptions |
      LongRunningPathTemplateBasedRequestPrepareOptions)
    uid: azure-keyvault.KeyVaultClient.sendLongRunningRequest_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendLongRunningRequest<TResult>(options:
        LongRunningUrlBasedRequestPrepareOptions |
        LongRunningPathTemplateBasedRequestPrepareOptions): Promise<TResult>
      parameters:
        - id: options
          type: >-
            LongRunningUrlBasedRequestPrepareOptions |
            LongRunningPathTemplateBasedRequestPrepareOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;TResult&gt;
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.sendLongRunningRequest
  - name: >-
      sendLongRunningRequest<TResult>(LongRunningUrlBasedRequestPrepareOptions |
      LongRunningPathTemplateBasedRequestPrepareOptions,
      ServiceCallback<TResult>)
    uid: azure-keyvault.KeyVaultClient.sendLongRunningRequest
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendLongRunningRequest<TResult>(options:
        LongRunningUrlBasedRequestPrepareOptions |
        LongRunningPathTemplateBasedRequestPrepareOptions, callback:
        ServiceCallback<TResult>)
      parameters:
        - id: options
          type: >-
            LongRunningUrlBasedRequestPrepareOptions |
            LongRunningPathTemplateBasedRequestPrepareOptions
          description: ''
        - id: callback
          type: ServiceCallback&lt;TResult&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.sendLongRunningRequest
  - name: >-
      sendLongRunningRequestWithHttpOperationResponse<TResult>(LongRunningUrlBasedRequestPrepareOptions
      | LongRunningPathTemplateBasedRequestPrepareOptions)
    uid: >-
      azure-keyvault.KeyVaultClient.sendLongRunningRequestWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        sendLongRunningRequestWithHttpOperationResponse<TResult>(options:
        LongRunningUrlBasedRequestPrepareOptions |
        LongRunningPathTemplateBasedRequestPrepareOptions):
        Promise<HttpOperationResponse<TResult>>
      parameters:
        - id: options
          type: >-
            LongRunningUrlBasedRequestPrepareOptions |
            LongRunningPathTemplateBasedRequestPrepareOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;HttpOperationResponse&lt;TResult&gt;&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      AzureServiceClient.sendLongRunningRequestWithHttpOperationResponse
  - name: >-
      sendRequest<TResult>(UrlBasedRequestPrepareOptions |
      PathTemplateBasedRequestPrepareOptions)
    uid: azure-keyvault.KeyVaultClient.sendRequest_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendRequest<TResult>(options: UrlBasedRequestPrepareOptions |
        PathTemplateBasedRequestPrepareOptions): Promise<TResult>
      parameters:
        - id: options
          type: >-
            UrlBasedRequestPrepareOptions |
            PathTemplateBasedRequestPrepareOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;TResult&gt;
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.sendRequest
  - name: >-
      sendRequest<TResult>(UrlBasedRequestPrepareOptions |
      PathTemplateBasedRequestPrepareOptions, ServiceCallback<TResult>)
    uid: azure-keyvault.KeyVaultClient.sendRequest
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendRequest<TResult>(options: UrlBasedRequestPrepareOptions |
        PathTemplateBasedRequestPrepareOptions, callback:
        ServiceCallback<TResult>)
      parameters:
        - id: options
          type: >-
            UrlBasedRequestPrepareOptions |
            PathTemplateBasedRequestPrepareOptions
          description: ''
        - id: callback
          type: ServiceCallback&lt;TResult&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.sendRequest
  - name: >-
      sendRequestWithHttpOperationResponse<TResult>(UrlBasedRequestPrepareOptions
      | PathTemplateBasedRequestPrepareOptions)
    uid: azure-keyvault.KeyVaultClient.sendRequestWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendRequestWithHttpOperationResponse<TResult>(options:
        UrlBasedRequestPrepareOptions | PathTemplateBasedRequestPrepareOptions):
        Promise<HttpOperationResponse<TResult>>
      parameters:
        - id: options
          type: >-
            UrlBasedRequestPrepareOptions |
            PathTemplateBasedRequestPrepareOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;HttpOperationResponse&lt;TResult&gt;&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      AzureServiceClient.sendRequestWithHttpOperationResponse
methods:
  - name: >-
      backupCertificate(string, string,
      ServiceCallback<BackupCertificateResult>)
    uid: azure-keyvault.KeyVaultClient.backupCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<BackupCertificateResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.BackupCertificateResult" />&gt;
          description: ''
  - name: >-
      backupCertificate(string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.backupCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupCertificate(vaultBaseUrl: string, certificateName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<BackupCertificateResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.BackupCertificateResult" />&gt;
  - name: >-
      backupCertificate(string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<BackupCertificateResult>)
    uid: azure-keyvault.KeyVaultClient.backupCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupCertificate(vaultBaseUrl: string, certificateName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<BackupCertificateResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.BackupCertificateResult" />&gt;
          description: ''
  - name: >-
      backupCertificateWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.backupCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupCertificateWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<BackupCertificateResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.BackupCertificateResult" />&gt;&gt;
  - name: backupKey(string, string, ServiceCallback<BackupKeyResult>)
    uid: azure-keyvault.KeyVaultClient.backupKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupKey(vaultBaseUrl: string, keyName: string, callback:
        ServiceCallback<BackupKeyResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.BackupKeyResult" />&gt;
          description: ''
  - name: >-
      backupKey(string, string, { customHeaders?: {[headerName: string]: string}
      })
    uid: azure-keyvault.KeyVaultClient.backupKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupKey(vaultBaseUrl: string, keyName: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<BackupKeyResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.BackupKeyResult"
          />&gt;
  - name: >-
      backupKey(string, string, { customHeaders?: {[headerName: string]: string}
      }, ServiceCallback<BackupKeyResult>)
    uid: azure-keyvault.KeyVaultClient.backupKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupKey(vaultBaseUrl: string, keyName: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<BackupKeyResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.BackupKeyResult" />&gt;
          description: ''
  - name: >-
      backupKeyWithHttpOperationResponse(string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.backupKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupKeyWithHttpOperationResponse(vaultBaseUrl: string,
        keyName: string, options?: { customHeaders?: {[headerName: string]:
        string} }): Promise<HttpOperationResponse<BackupKeyResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.BackupKeyResult" />&gt;&gt;
  - name: backupSecret(string, string, ServiceCallback<BackupSecretResult>)
    uid: azure-keyvault.KeyVaultClient.backupSecret_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<BackupSecretResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.BackupSecretResult" />&gt;
          description: ''
  - name: >-
      backupSecret(string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.backupSecret
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupSecret(vaultBaseUrl: string, secretName: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<BackupSecretResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.BackupSecretResult" />&gt;
  - name: >-
      backupSecret(string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<BackupSecretResult>)
    uid: azure-keyvault.KeyVaultClient.backupSecret_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupSecret(vaultBaseUrl: string, secretName: string, options:
        { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<BackupSecretResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.BackupSecretResult" />&gt;
          description: ''
  - name: >-
      backupSecretWithHttpOperationResponse(string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.backupSecretWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupSecretWithHttpOperationResponse(vaultBaseUrl: string,
        secretName: string, options?: { customHeaders?: {[headerName: string]:
        string} }): Promise<HttpOperationResponse<BackupSecretResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.BackupSecretResult" />&gt;&gt;
  - name: backupStorageAccount(string, string, ServiceCallback<BackupStorageResult>)
    uid: azure-keyvault.KeyVaultClient.backupStorageAccount_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<BackupStorageResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.BackupStorageResult" />&gt;
          description: ''
  - name: >-
      backupStorageAccount(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.backupStorageAccount
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<BackupStorageResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.BackupStorageResult" />&gt;
  - name: >-
      backupStorageAccount(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<BackupStorageResult>)
    uid: azure-keyvault.KeyVaultClient.backupStorageAccount_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<BackupStorageResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.BackupStorageResult" />&gt;
          description: ''
  - name: >-
      backupStorageAccountWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.backupStorageAccountWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupStorageAccountWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<BackupStorageResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.BackupStorageResult" />&gt;&gt;
  - name: createCertificate(string, string, ServiceCallback<CertificateOperation>)
    uid: azure-keyvault.KeyVaultClient.createCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
          description: ''
  - name: >-
      createCertificate(string, string, { certificateAttributes?:
      CertificateAttributes, certificatePolicy?: CertificatePolicy,
      customHeaders?: {[headerName: string]: string}, tags?: {[propertyName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.createCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createCertificate(vaultBaseUrl: string, certificateName:
        string, options?: { certificateAttributes?: CertificateAttributes,
        certificatePolicy?: CertificatePolicy, customHeaders?: {[headerName:
        string]: string}, tags?: {[propertyName: string]: string} }):
        Promise<CertificateOperation>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, certificatePolicy?:
            CertificatePolicy, customHeaders?: {[headerName: string]: string},
            tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
  - name: >-
      createCertificate(string, string, { certificateAttributes?:
      CertificateAttributes, certificatePolicy?: CertificatePolicy,
      customHeaders?: {[headerName: string]: string}, tags?: {[propertyName:
      string]: string} }, ServiceCallback<CertificateOperation>)
    uid: azure-keyvault.KeyVaultClient.createCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createCertificate(vaultBaseUrl: string, certificateName:
        string, options: { certificateAttributes?: CertificateAttributes,
        certificatePolicy?: CertificatePolicy, customHeaders?: {[headerName:
        string]: string}, tags?: {[propertyName: string]: string} }, callback:
        ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, certificatePolicy?:
            CertificatePolicy, customHeaders?: {[headerName: string]: string},
            tags?: {[propertyName: string]: string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
          description: ''
  - name: >-
      createCertificateWithHttpOperationResponse(string, string, {
      certificateAttributes?: CertificateAttributes, certificatePolicy?:
      CertificatePolicy, customHeaders?: {[headerName: string]: string}, tags?:
      {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.createCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createCertificateWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, options?: { certificateAttributes?:
        CertificateAttributes, certificatePolicy?: CertificatePolicy,
        customHeaders?: {[headerName: string]: string}, tags?: {[propertyName:
        string]: string} }):
        Promise<HttpOperationResponse<CertificateOperation>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, certificatePolicy?:
            CertificatePolicy, customHeaders?: {[headerName: string]: string},
            tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;&gt;
  - name: createKey(string, string, string, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.createKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createKey(vaultBaseUrl: string, keyName: string, kty: string,
        callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: kty
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      createKey(string, string, string, { curve?: string, customHeaders?:
      {[headerName: string]: string}, keyAttributes?: KeyAttributes, keyOps?:
      string[], keySize?: number, tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.createKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createKey(vaultBaseUrl: string, keyName: string, kty: string,
        options?: { curve?: string, customHeaders?: {[headerName: string]:
        string}, keyAttributes?: KeyAttributes, keyOps?: string[], keySize?:
        number, tags?: {[propertyName: string]: string} }): Promise<KeyBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: |-
            The name for the new key. The system will generate
            the version name for the new key.
        - id: kty
          type: string
          description: >-
            The type of key to create. For valid values, see

            JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA',
            'RSA-HSM',

            'oct'
        - id: options
          type: >-
            { curve?: string, customHeaders?: {[headerName: string]: string},
            keyAttributes?: KeyAttributes, keyOps?: string[], keySize?: number,
            tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
  - name: >-
      createKey(string, string, string, { curve?: string, customHeaders?:
      {[headerName: string]: string}, keyAttributes?: KeyAttributes, keyOps?:
      string[], keySize?: number, tags?: {[propertyName: string]: string} },
      ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.createKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createKey(vaultBaseUrl: string, keyName: string, kty: string,
        options: { curve?: string, customHeaders?: {[headerName: string]:
        string}, keyAttributes?: KeyAttributes, keyOps?: string[], keySize?:
        number, tags?: {[propertyName: string]: string} }, callback:
        ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: kty
          type: string
          description: ''
        - id: options
          type: >-
            { curve?: string, customHeaders?: {[headerName: string]: string},
            keyAttributes?: KeyAttributes, keyOps?: string[], keySize?: number,
            tags?: {[propertyName: string]: string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      createKeyWithHttpOperationResponse(string, string, string, { curve?:
      string, customHeaders?: {[headerName: string]: string}, keyAttributes?:
      KeyAttributes, keyOps?: string[], keySize?: number, tags?: {[propertyName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.createKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createKeyWithHttpOperationResponse(vaultBaseUrl: string,
        keyName: string, kty: string, options?: { curve?: string,
        customHeaders?: {[headerName: string]: string}, keyAttributes?:
        KeyAttributes, keyOps?: string[], keySize?: number, tags?:
        {[propertyName: string]: string} }):
        Promise<HttpOperationResponse<KeyBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: |-
            The name for the new key. The system will generate
            the version name for the new key.
        - id: kty
          type: string
          description: >-
            The type of key to create. For valid values, see

            JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA',
            'RSA-HSM',

            'oct'
        - id: options
          type: >-
            { curve?: string, customHeaders?: {[headerName: string]: string},
            keyAttributes?: KeyAttributes, keyOps?: string[], keySize?: number,
            tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;&gt;
  - name: >-
      decrypt(string, string, string, string, Buffer,
      ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.decrypt_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function decrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      decrypt(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.decrypt
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function decrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<KeyOperationResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: |-
            algorithm identifier. Possible values include:
            'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
  - name: >-
      decrypt(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.decrypt_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function decrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      decryptWithHttpOperationResponse(string, string, string, string, Buffer, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.decryptWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function decryptWithHttpOperationResponse(vaultBaseUrl: string, keyName:
        string, keyVersion: string, algorithm: string, value: Buffer, options?:
        { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<KeyOperationResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: |-
            algorithm identifier. Possible values include:
            'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;&gt;
  - name: >-
      deleteCertificate(string, string,
      ServiceCallback<DeletedCertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<DeletedCertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedCertificateBundle" />&gt;
          description: ''
  - name: >-
      deleteCertificate(string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.deleteCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificate(vaultBaseUrl: string, certificateName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedCertificateBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedCertificateBundle" />&gt;
  - name: >-
      deleteCertificate(string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<DeletedCertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificate(vaultBaseUrl: string, certificateName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<DeletedCertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedCertificateBundle" />&gt;
          description: ''
  - name: deleteCertificateContacts(string, ServiceCallback<Contacts>)
    uid: azure-keyvault.KeyVaultClient.deleteCertificateContacts_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateContacts(vaultBaseUrl: string, callback:
        ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;
          description: ''
  - name: >-
      deleteCertificateContacts(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.deleteCertificateContacts
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateContacts(vaultBaseUrl: string, options?: {
        customHeaders?: {[headerName: string]: string} }): Promise<Contacts>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;
  - name: >-
      deleteCertificateContacts(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<Contacts>)
    uid: azure-keyvault.KeyVaultClient.deleteCertificateContacts_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateContacts(vaultBaseUrl: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;
          description: ''
  - name: >-
      deleteCertificateContactsWithHttpOperationResponse(string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.deleteCertificateContactsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        deleteCertificateContactsWithHttpOperationResponse(vaultBaseUrl: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<Contacts>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;&gt;
  - name: deleteCertificateIssuer(string, string, ServiceCallback<IssuerBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteCertificateIssuer_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: issuerName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;
          description: ''
  - name: >-
      deleteCertificateIssuer(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.deleteCertificateIssuer
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<IssuerBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: issuerName
          type: string
          description: The name of the issuer.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.IssuerBundle"
          />&gt;
  - name: >-
      deleteCertificateIssuer(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<IssuerBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteCertificateIssuer_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: issuerName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;
          description: ''
  - name: >-
      deleteCertificateIssuerWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.deleteCertificateIssuerWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateIssuerWithHttpOperationResponse(vaultBaseUrl:
        string, issuerName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<IssuerBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: issuerName
          type: string
          description: The name of the issuer.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;&gt;
  - name: >-
      deleteCertificateOperation(string, string,
      ServiceCallback<CertificateOperation>)
    uid: azure-keyvault.KeyVaultClient.deleteCertificateOperation_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateOperation(vaultBaseUrl: string,
        certificateName: string, callback:
        ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
          description: ''
  - name: >-
      deleteCertificateOperation(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.deleteCertificateOperation
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateOperation(vaultBaseUrl: string,
        certificateName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<CertificateOperation>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
  - name: >-
      deleteCertificateOperation(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<CertificateOperation>)
    uid: azure-keyvault.KeyVaultClient.deleteCertificateOperation_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateOperation(vaultBaseUrl: string,
        certificateName: string, options: { customHeaders?: {[headerName:
        string]: string} }, callback: ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
          description: ''
  - name: >-
      deleteCertificateOperationWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.deleteCertificateOperationWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        deleteCertificateOperationWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificateOperation>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;&gt;
  - name: >-
      deleteCertificateWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.deleteCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteCertificateWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedCertificateBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedCertificateBundle"
          />&gt;&gt;
  - name: deleteKey(string, string, ServiceCallback<DeletedKeyBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteKey(vaultBaseUrl: string, keyName: string, callback:
        ServiceCallback<DeletedKeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedKeyBundle" />&gt;
          description: ''
  - name: >-
      deleteKey(string, string, { customHeaders?: {[headerName: string]: string}
      })
    uid: azure-keyvault.KeyVaultClient.deleteKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteKey(vaultBaseUrl: string, keyName: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedKeyBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key to delete.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.DeletedKeyBundle"
          />&gt;
  - name: >-
      deleteKey(string, string, { customHeaders?: {[headerName: string]: string}
      }, ServiceCallback<DeletedKeyBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteKey(vaultBaseUrl: string, keyName: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedKeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedKeyBundle" />&gt;
          description: ''
  - name: >-
      deleteKeyWithHttpOperationResponse(string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.deleteKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteKeyWithHttpOperationResponse(vaultBaseUrl: string,
        keyName: string, options?: { customHeaders?: {[headerName: string]:
        string} }): Promise<HttpOperationResponse<DeletedKeyBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key to delete.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedKeyBundle" />&gt;&gt;
  - name: >-
      deleteSasDefinition(string, string, string,
      ServiceCallback<DeletedSasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteSasDefinition_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, callback:
        ServiceCallback<DeletedSasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionBundle"
            />&gt;
          description: ''
  - name: >-
      deleteSasDefinition(string, string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.deleteSasDefinition
    package: azure-keyvault
    summary: |-
      Deletes a SAS definition from a specified storage account. This operation
      requires the storage/deletesas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<DeletedSasDefinitionBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionBundle" />&gt;
  - name: >-
      deleteSasDefinition(string, string, string, { customHeaders?:
      {[headerName: string]: string} },
      ServiceCallback<DeletedSasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteSasDefinition_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedSasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionBundle"
            />&gt;
          description: ''
  - name: >-
      deleteSasDefinitionWithHttpOperationResponse(string, string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.deleteSasDefinitionWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      Deletes a SAS definition from a specified storage account. This operation
      requires the storage/deletesas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteSasDefinitionWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, sasDefinitionName: string, options?:
        { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedSasDefinitionBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionBundle"
          />&gt;&gt;
  - name: deleteSecret(string, string, ServiceCallback<DeletedSecretBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteSecret_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<DeletedSecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSecretBundle" />&gt;
          description: ''
  - name: >-
      deleteSecret(string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.deleteSecret
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteSecret(vaultBaseUrl: string, secretName: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedSecretBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSecretBundle" />&gt;
  - name: >-
      deleteSecret(string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<DeletedSecretBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteSecret_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteSecret(vaultBaseUrl: string, secretName: string, options:
        { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedSecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSecretBundle" />&gt;
          description: ''
  - name: >-
      deleteSecretWithHttpOperationResponse(string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.deleteSecretWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteSecretWithHttpOperationResponse(vaultBaseUrl: string,
        secretName: string, options?: { customHeaders?: {[headerName: string]:
        string} }): Promise<HttpOperationResponse<DeletedSecretBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSecretBundle" />&gt;&gt;
  - name: >-
      deleteStorageAccount(string, string,
      ServiceCallback<DeletedStorageBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteStorageAccount_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<DeletedStorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedStorageBundle" />&gt;
          description: ''
  - name: >-
      deleteStorageAccount(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.deleteStorageAccount
    package: azure-keyvault
    summary: |-
      Deletes a storage account. This operation requires the storage/delete
      permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedStorageBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedStorageBundle" />&gt;
  - name: >-
      deleteStorageAccount(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<DeletedStorageBundle>)
    uid: azure-keyvault.KeyVaultClient.deleteStorageAccount_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<DeletedStorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedStorageBundle" />&gt;
          description: ''
  - name: >-
      deleteStorageAccountWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.deleteStorageAccountWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      Deletes a storage account. This operation requires the storage/delete
      permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteStorageAccountWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedStorageBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedStorageBundle" />&gt;&gt;
  - name: >-
      encrypt(string, string, string, string, Buffer,
      ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.encrypt_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function encrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      encrypt(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.encrypt
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function encrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<KeyOperationResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: |-
            algorithm identifier. Possible values include:
            'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
  - name: >-
      encrypt(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.encrypt_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function encrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      encryptWithHttpOperationResponse(string, string, string, string, Buffer, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.encryptWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function encryptWithHttpOperationResponse(vaultBaseUrl: string, keyName:
        string, keyVersion: string, algorithm: string, value: Buffer, options?:
        { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<KeyOperationResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: |-
            algorithm identifier. Possible values include:
            'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;&gt;
  - name: getCertificate(string, string, string, ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.getCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificate(vaultBaseUrl: string, certificateName: string,
        certificateVersion: string, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: certificateVersion
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      getCertificate(string, string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificate(vaultBaseUrl: string, certificateName: string,
        certificateVersion: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<CertificateBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: |-
            The name of the certificate in the given
            vault.
        - id: certificateVersion
          type: string
          description: The version of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.CertificateBundle"
          />&gt;
  - name: >-
      getCertificate(string, string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.getCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificate(vaultBaseUrl: string, certificateName: string,
        certificateVersion: string, options: { customHeaders?: {[headerName:
        string]: string} }, callback: ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: certificateVersion
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: getCertificateContacts(string, ServiceCallback<Contacts>)
    uid: azure-keyvault.KeyVaultClient.getCertificateContacts_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateContacts(vaultBaseUrl: string, callback:
        ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;
          description: ''
  - name: >-
      getCertificateContacts(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getCertificateContacts
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateContacts(vaultBaseUrl: string, options?: {
        customHeaders?: {[headerName: string]: string} }): Promise<Contacts>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;
  - name: >-
      getCertificateContacts(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<Contacts>)
    uid: azure-keyvault.KeyVaultClient.getCertificateContacts_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateContacts(vaultBaseUrl: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;
          description: ''
  - name: >-
      getCertificateContactsWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getCertificateContactsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateContactsWithHttpOperationResponse(vaultBaseUrl:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<Contacts>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;&gt;
  - name: getCertificateIssuer(string, string, ServiceCallback<IssuerBundle>)
    uid: azure-keyvault.KeyVaultClient.getCertificateIssuer_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: issuerName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;
          description: ''
  - name: >-
      getCertificateIssuer(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getCertificateIssuer
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<IssuerBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: issuerName
          type: string
          description: The name of the issuer.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.IssuerBundle"
          />&gt;
  - name: >-
      getCertificateIssuer(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<IssuerBundle>)
    uid: azure-keyvault.KeyVaultClient.getCertificateIssuer_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        options: { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: issuerName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;
          description: ''
  - name: >-
      getCertificateIssuers(string,
      ServiceCallback<CertificateIssuerListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificateIssuers_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuers(vaultBaseUrl: string, callback:
        ServiceCallback<CertificateIssuerListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateIssuerListResult"
            />&gt;
          description: ''
  - name: >-
      getCertificateIssuers(string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getCertificateIssuers
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuers(vaultBaseUrl: string, options?: {
        customHeaders?: {[headerName: string]: string}, maxresults?: number }):
        Promise<CertificateIssuerListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateIssuerListResult" />&gt;
  - name: >-
      getCertificateIssuers(string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number },
      ServiceCallback<CertificateIssuerListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificateIssuers_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuers(vaultBaseUrl: string, options: {
        customHeaders?: {[headerName: string]: string}, maxresults?: number },
        callback: ServiceCallback<CertificateIssuerListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateIssuerListResult"
            />&gt;
          description: ''
  - name: >-
      getCertificateIssuersNext(string,
      ServiceCallback<CertificateIssuerListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificateIssuersNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuersNext(nextPageLink: string, callback:
        ServiceCallback<CertificateIssuerListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateIssuerListResult"
            />&gt;
          description: ''
  - name: >-
      getCertificateIssuersNext(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getCertificateIssuersNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuersNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<CertificateIssuerListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateIssuerListResult" />&gt;
  - name: >-
      getCertificateIssuersNext(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<CertificateIssuerListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificateIssuersNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuersNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<CertificateIssuerListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateIssuerListResult"
            />&gt;
          description: ''
  - name: >-
      getCertificateIssuersNextWithHttpOperationResponse(string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getCertificateIssuersNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        getCertificateIssuersNextWithHttpOperationResponse(nextPageLink: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificateIssuerListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateIssuerListResult"
          />&gt;&gt;
  - name: >-
      getCertificateIssuersWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string}, maxresults?: number })
    uid: >-
      azure-keyvault.KeyVaultClient.getCertificateIssuersWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuersWithHttpOperationResponse(vaultBaseUrl:
        string, options?: { customHeaders?: {[headerName: string]: string},
        maxresults?: number }):
        Promise<HttpOperationResponse<CertificateIssuerListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateIssuerListResult"
          />&gt;&gt;
  - name: >-
      getCertificateIssuerWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getCertificateIssuerWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateIssuerWithHttpOperationResponse(vaultBaseUrl:
        string, issuerName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<IssuerBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: issuerName
          type: string
          description: The name of the issuer.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;&gt;
  - name: >-
      getCertificateOperation(string, string,
      ServiceCallback<CertificateOperation>)
    uid: azure-keyvault.KeyVaultClient.getCertificateOperation_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateOperation(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
          description: ''
  - name: >-
      getCertificateOperation(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getCertificateOperation
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateOperation(vaultBaseUrl: string, certificateName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<CertificateOperation>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
  - name: >-
      getCertificateOperation(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<CertificateOperation>)
    uid: azure-keyvault.KeyVaultClient.getCertificateOperation_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateOperation(vaultBaseUrl: string, certificateName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
          description: ''
  - name: >-
      getCertificateOperationWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getCertificateOperationWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateOperationWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificateOperation>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;&gt;
  - name: getCertificatePolicy(string, string, ServiceCallback<CertificatePolicy>)
    uid: azure-keyvault.KeyVaultClient.getCertificatePolicy_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<CertificatePolicy>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />&gt;
          description: ''
  - name: >-
      getCertificatePolicy(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getCertificatePolicy
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<CertificatePolicy>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: |-
            The name of the certificate in a given key
            vault.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.CertificatePolicy"
          />&gt;
  - name: >-
      getCertificatePolicy(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<CertificatePolicy>)
    uid: azure-keyvault.KeyVaultClient.getCertificatePolicy_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<CertificatePolicy>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />&gt;
          description: ''
  - name: >-
      getCertificatePolicyWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getCertificatePolicyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificatePolicyWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificatePolicy>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: |-
            The name of the certificate in a given key
            vault.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />&gt;&gt;
  - name: getCertificates(string, ServiceCallback<CertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificates_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificates(vaultBaseUrl: string, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
          description: ''
  - name: >-
      getCertificates(string, { customHeaders?: {[headerName: string]: string},
      includePending?: boolean, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getCertificates
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificates(vaultBaseUrl: string, options?: {
        customHeaders?: {[headerName: string]: string}, includePending?:
        boolean, maxresults?: number }): Promise<CertificateListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, includePending?:
            boolean, maxresults?: number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
  - name: >-
      getCertificates(string, { customHeaders?: {[headerName: string]: string},
      includePending?: boolean, maxresults?: number },
      ServiceCallback<CertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificates_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificates(vaultBaseUrl: string, options: {
        customHeaders?: {[headerName: string]: string}, includePending?:
        boolean, maxresults?: number }, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, includePending?:
            boolean, maxresults?: number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
          description: ''
  - name: getCertificatesNext(string, ServiceCallback<CertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificatesNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificatesNext(nextPageLink: string, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
          description: ''
  - name: >-
      getCertificatesNext(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getCertificatesNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificatesNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<CertificateListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
  - name: >-
      getCertificatesNext(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<CertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificatesNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificatesNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
          description: ''
  - name: >-
      getCertificatesNextWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getCertificatesNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificatesNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificateListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;&gt;
  - name: >-
      getCertificatesWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string}, includePending?: boolean, maxresults?:
      number })
    uid: azure-keyvault.KeyVaultClient.getCertificatesWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificatesWithHttpOperationResponse(vaultBaseUrl: string,
        options?: { customHeaders?: {[headerName: string]: string},
        includePending?: boolean, maxresults?: number }):
        Promise<HttpOperationResponse<CertificateListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, includePending?:
            boolean, maxresults?: number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;&gt;
  - name: >-
      getCertificateVersions(string, string,
      ServiceCallback<CertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificateVersions_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateVersions(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<CertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
          description: ''
  - name: >-
      getCertificateVersions(string, string, { customHeaders?: {[headerName:
      string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getCertificateVersions
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateVersions(vaultBaseUrl: string, certificateName:
        string, options?: { customHeaders?: {[headerName: string]: string},
        maxresults?: number }): Promise<CertificateListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
  - name: >-
      getCertificateVersions(string, string, { customHeaders?: {[headerName:
      string]: string}, maxresults?: number },
      ServiceCallback<CertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificateVersions_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateVersions(vaultBaseUrl: string, certificateName:
        string, options: { customHeaders?: {[headerName: string]: string},
        maxresults?: number }, callback: ServiceCallback<CertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
          description: ''
  - name: getCertificateVersionsNext(string, ServiceCallback<CertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificateVersionsNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateVersionsNext(nextPageLink: string, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
          description: ''
  - name: >-
      getCertificateVersionsNext(string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getCertificateVersionsNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateVersionsNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<CertificateListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
  - name: >-
      getCertificateVersionsNext(string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<CertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getCertificateVersionsNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateVersionsNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;
          description: ''
  - name: >-
      getCertificateVersionsNextWithHttpOperationResponse(string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getCertificateVersionsNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        getCertificateVersionsNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificateListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;&gt;
  - name: >-
      getCertificateVersionsWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string}, maxresults?: number })
    uid: >-
      azure-keyvault.KeyVaultClient.getCertificateVersionsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateVersionsWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, options?: { customHeaders?:
        {[headerName: string]: string}, maxresults?: number }):
        Promise<HttpOperationResponse<CertificateListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateListResult" />&gt;&gt;
  - name: >-
      getCertificateWithHttpOperationResponse(string, string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCertificateWithHttpOperationResponse(vaultBaseUrl: string,
        certificateName: string, certificateVersion: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificateBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: |-
            The name of the certificate in the given
            vault.
        - id: certificateVersion
          type: string
          description: The version of the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;&gt;
  - name: >-
      getDeletedCertificate(string, string,
      ServiceCallback<DeletedCertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<DeletedCertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedCertificateBundle" />&gt;
          description: ''
  - name: >-
      getDeletedCertificate(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedCertificateBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedCertificateBundle" />&gt;
  - name: >-
      getDeletedCertificate(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<DeletedCertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<DeletedCertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedCertificateBundle" />&gt;
          description: ''
  - name: >-
      getDeletedCertificates(string,
      ServiceCallback<DeletedCertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedCertificates_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificates(vaultBaseUrl: string, callback:
        ServiceCallback<DeletedCertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedCertificateListResult"
            />&gt;
          description: ''
  - name: >-
      getDeletedCertificates(string, { customHeaders?: {[headerName: string]:
      string}, includePending?: boolean, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getDeletedCertificates
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificates(vaultBaseUrl: string, options?: {
        customHeaders?: {[headerName: string]: string}, includePending?:
        boolean, maxresults?: number }): Promise<DeletedCertificateListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, includePending?:
            boolean, maxresults?: number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedCertificateListResult"
          />&gt;
  - name: >-
      getDeletedCertificates(string, { customHeaders?: {[headerName: string]:
      string}, includePending?: boolean, maxresults?: number },
      ServiceCallback<DeletedCertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedCertificates_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificates(vaultBaseUrl: string, options: {
        customHeaders?: {[headerName: string]: string}, includePending?:
        boolean, maxresults?: number }, callback:
        ServiceCallback<DeletedCertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, includePending?:
            boolean, maxresults?: number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedCertificateListResult"
            />&gt;
          description: ''
  - name: >-
      getDeletedCertificatesNext(string,
      ServiceCallback<DeletedCertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedCertificatesNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificatesNext(nextPageLink: string, callback:
        ServiceCallback<DeletedCertificateListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedCertificateListResult"
            />&gt;
          description: ''
  - name: >-
      getDeletedCertificatesNext(string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedCertificatesNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificatesNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedCertificateListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedCertificateListResult"
          />&gt;
  - name: >-
      getDeletedCertificatesNext(string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<DeletedCertificateListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedCertificatesNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificatesNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedCertificateListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedCertificateListResult"
            />&gt;
          description: ''
  - name: >-
      getDeletedCertificatesNextWithHttpOperationResponse(string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedCertificatesNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        getDeletedCertificatesNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedCertificateListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedCertificateListResult"
          />&gt;&gt;
  - name: >-
      getDeletedCertificatesWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string}, includePending?: boolean, maxresults?:
      number })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedCertificatesWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificatesWithHttpOperationResponse(vaultBaseUrl:
        string, options?: { customHeaders?: {[headerName: string]: string},
        includePending?: boolean, maxresults?: number }):
        Promise<HttpOperationResponse<DeletedCertificateListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, includePending?:
            boolean, maxresults?: number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedCertificateListResult"
          />&gt;&gt;
  - name: >-
      getDeletedCertificateWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedCertificateWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedCertificateBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedCertificateBundle"
          />&gt;&gt;
  - name: getDeletedKey(string, string, ServiceCallback<DeletedKeyBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKey(vaultBaseUrl: string, keyName: string, callback:
        ServiceCallback<DeletedKeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedKeyBundle" />&gt;
          description: ''
  - name: >-
      getDeletedKey(string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKey(vaultBaseUrl: string, keyName: string, options?:
        { customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedKeyBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.DeletedKeyBundle"
          />&gt;
  - name: >-
      getDeletedKey(string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<DeletedKeyBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKey(vaultBaseUrl: string, keyName: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedKeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedKeyBundle" />&gt;
          description: ''
  - name: getDeletedKeys(string, ServiceCallback<DeletedKeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedKeys_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKeys(vaultBaseUrl: string, callback:
        ServiceCallback<DeletedKeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedKeyListResult" />&gt;
          description: ''
  - name: >-
      getDeletedKeys(string, { customHeaders?: {[headerName: string]: string},
      maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getDeletedKeys
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKeys(vaultBaseUrl: string, options?: {
        customHeaders?: {[headerName: string]: string}, maxresults?: number }):
        Promise<DeletedKeyListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedKeyListResult" />&gt;
  - name: >-
      getDeletedKeys(string, { customHeaders?: {[headerName: string]: string},
      maxresults?: number }, ServiceCallback<DeletedKeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedKeys_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKeys(vaultBaseUrl: string, options: { customHeaders?:
        {[headerName: string]: string}, maxresults?: number }, callback:
        ServiceCallback<DeletedKeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedKeyListResult" />&gt;
          description: ''
  - name: getDeletedKeysNext(string, ServiceCallback<DeletedKeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedKeysNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKeysNext(nextPageLink: string, callback:
        ServiceCallback<DeletedKeyListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedKeyListResult" />&gt;
          description: ''
  - name: >-
      getDeletedKeysNext(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedKeysNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKeysNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedKeyListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedKeyListResult" />&gt;
  - name: >-
      getDeletedKeysNext(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<DeletedKeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedKeysNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKeysNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedKeyListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedKeyListResult" />&gt;
          description: ''
  - name: >-
      getDeletedKeysNextWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedKeysNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKeysNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedKeyListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedKeyListResult" />&gt;&gt;
  - name: >-
      getDeletedKeysWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getDeletedKeysWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKeysWithHttpOperationResponse(vaultBaseUrl: string,
        options?: { customHeaders?: {[headerName: string]: string}, maxresults?:
        number }): Promise<HttpOperationResponse<DeletedKeyListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedKeyListResult" />&gt;&gt;
  - name: >-
      getDeletedKeyWithHttpOperationResponse(string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKeyWithHttpOperationResponse(vaultBaseUrl: string,
        keyName: string, options?: { customHeaders?: {[headerName: string]:
        string} }): Promise<HttpOperationResponse<DeletedKeyBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedKeyBundle" />&gt;&gt;
  - name: >-
      getDeletedSasDefinition(string, string, string,
      ServiceCallback<DeletedSasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSasDefinition_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, callback:
        ServiceCallback<DeletedSasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionBundle"
            />&gt;
          description: ''
  - name: >-
      getDeletedSasDefinition(string, string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedSasDefinition
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedSasDefinitionBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionBundle" />&gt;
  - name: >-
      getDeletedSasDefinition(string, string, string, { customHeaders?:
      {[headerName: string]: string} },
      ServiceCallback<DeletedSasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSasDefinition_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedSasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionBundle"
            />&gt;
          description: ''
  - name: >-
      getDeletedSasDefinitions(string, string,
      ServiceCallback<DeletedSasDefinitionListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSasDefinitions_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinitions(vaultBaseUrl: string,
        storageAccountName: string, callback:
        ServiceCallback<DeletedSasDefinitionListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionListResult"
            />&gt;
          description: ''
  - name: >-
      getDeletedSasDefinitions(string, string, { customHeaders?: {[headerName:
      string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getDeletedSasDefinitions
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinitions(vaultBaseUrl: string,
        storageAccountName: string, options?: { customHeaders?: {[headerName:
        string]: string}, maxresults?: number }):
        Promise<DeletedSasDefinitionListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionListResult"
          />&gt;
  - name: >-
      getDeletedSasDefinitions(string, string, { customHeaders?: {[headerName:
      string]: string}, maxresults?: number },
      ServiceCallback<DeletedSasDefinitionListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSasDefinitions_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinitions(vaultBaseUrl: string,
        storageAccountName: string, options: { customHeaders?: {[headerName:
        string]: string}, maxresults?: number }, callback:
        ServiceCallback<DeletedSasDefinitionListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionListResult"
            />&gt;
          description: ''
  - name: >-
      getDeletedSasDefinitionsNext(string,
      ServiceCallback<DeletedSasDefinitionListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSasDefinitionsNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinitionsNext(nextPageLink: string, callback:
        ServiceCallback<DeletedSasDefinitionListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionListResult"
            />&gt;
          description: ''
  - name: >-
      getDeletedSasDefinitionsNext(string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedSasDefinitionsNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinitionsNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedSasDefinitionListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionListResult"
          />&gt;
  - name: >-
      getDeletedSasDefinitionsNext(string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<DeletedSasDefinitionListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSasDefinitionsNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinitionsNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedSasDefinitionListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionListResult"
            />&gt;
          description: ''
  - name: >-
      getDeletedSasDefinitionsNextWithHttpOperationResponse(string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedSasDefinitionsNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        getDeletedSasDefinitionsNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedSasDefinitionListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionListResult"
          />&gt;&gt;
  - name: >-
      getDeletedSasDefinitionsWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string}, maxresults?: number })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedSasDefinitionsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinitionsWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, options?: { customHeaders?:
        {[headerName: string]: string}, maxresults?: number }):
        Promise<HttpOperationResponse<DeletedSasDefinitionListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionListResult"
          />&gt;&gt;
  - name: >-
      getDeletedSasDefinitionWithHttpOperationResponse(string, string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedSasDefinitionWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSasDefinitionWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, sasDefinitionName: string, options?:
        { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedSasDefinitionBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSasDefinitionBundle"
          />&gt;&gt;
  - name: getDeletedSecret(string, string, ServiceCallback<DeletedSecretBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSecret_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<DeletedSecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSecretBundle" />&gt;
          description: ''
  - name: >-
      getDeletedSecret(string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedSecret
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecret(vaultBaseUrl: string, secretName: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedSecretBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSecretBundle" />&gt;
  - name: >-
      getDeletedSecret(string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<DeletedSecretBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSecret_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecret(vaultBaseUrl: string, secretName: string,
        options: { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedSecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSecretBundle" />&gt;
          description: ''
  - name: getDeletedSecrets(string, ServiceCallback<DeletedSecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSecrets_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecrets(vaultBaseUrl: string, callback:
        ServiceCallback<DeletedSecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSecretListResult" />&gt;
          description: ''
  - name: >-
      getDeletedSecrets(string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getDeletedSecrets
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecrets(vaultBaseUrl: string, options?: {
        customHeaders?: {[headerName: string]: string}, maxresults?: number }):
        Promise<DeletedSecretListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSecretListResult" />&gt;
  - name: >-
      getDeletedSecrets(string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number }, ServiceCallback<DeletedSecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSecrets_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecrets(vaultBaseUrl: string, options: {
        customHeaders?: {[headerName: string]: string}, maxresults?: number },
        callback: ServiceCallback<DeletedSecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSecretListResult" />&gt;
          description: ''
  - name: getDeletedSecretsNext(string, ServiceCallback<DeletedSecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSecretsNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecretsNext(nextPageLink: string, callback:
        ServiceCallback<DeletedSecretListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSecretListResult" />&gt;
          description: ''
  - name: >-
      getDeletedSecretsNext(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedSecretsNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecretsNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedSecretListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSecretListResult" />&gt;
  - name: >-
      getDeletedSecretsNext(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<DeletedSecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedSecretsNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecretsNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedSecretListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedSecretListResult" />&gt;
          description: ''
  - name: >-
      getDeletedSecretsNextWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedSecretsNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecretsNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedSecretListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSecretListResult" />&gt;&gt;
  - name: >-
      getDeletedSecretsWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getDeletedSecretsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecretsWithHttpOperationResponse(vaultBaseUrl:
        string, options?: { customHeaders?: {[headerName: string]: string},
        maxresults?: number }):
        Promise<HttpOperationResponse<DeletedSecretListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSecretListResult" />&gt;&gt;
  - name: >-
      getDeletedSecretWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedSecretWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecretWithHttpOperationResponse(vaultBaseUrl: string,
        secretName: string, options?: { customHeaders?: {[headerName: string]:
        string} }): Promise<HttpOperationResponse<DeletedSecretBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedSecretBundle" />&gt;&gt;
  - name: >-
      getDeletedStorageAccount(string, string,
      ServiceCallback<DeletedStorageBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedStorageAccount_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, callback:
        ServiceCallback<DeletedStorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedStorageBundle" />&gt;
          description: ''
  - name: >-
      getDeletedStorageAccount(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedStorageAccount
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<DeletedStorageBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedStorageBundle" />&gt;
  - name: >-
      getDeletedStorageAccount(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<DeletedStorageBundle>)
    uid: azure-keyvault.KeyVaultClient.getDeletedStorageAccount_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options: { customHeaders?: {[headerName:
        string]: string} }, callback: ServiceCallback<DeletedStorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedStorageBundle" />&gt;
          description: ''
  - name: >-
      getDeletedStorageAccounts(string,
      ServiceCallback<DeletedStorageListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedStorageAccounts_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccounts(vaultBaseUrl: string, callback:
        ServiceCallback<DeletedStorageListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedStorageListResult" />&gt;
          description: ''
  - name: >-
      getDeletedStorageAccounts(string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getDeletedStorageAccounts
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccounts(vaultBaseUrl: string, options?: {
        customHeaders?: {[headerName: string]: string}, maxresults?: number }):
        Promise<DeletedStorageListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedStorageListResult" />&gt;
  - name: >-
      getDeletedStorageAccounts(string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number }, ServiceCallback<DeletedStorageListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedStorageAccounts_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccounts(vaultBaseUrl: string, options: {
        customHeaders?: {[headerName: string]: string}, maxresults?: number },
        callback: ServiceCallback<DeletedStorageListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedStorageListResult" />&gt;
          description: ''
  - name: >-
      getDeletedStorageAccountsNext(string,
      ServiceCallback<DeletedStorageListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedStorageAccountsNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccountsNext(nextPageLink: string, callback:
        ServiceCallback<DeletedStorageListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedStorageListResult" />&gt;
          description: ''
  - name: >-
      getDeletedStorageAccountsNext(string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getDeletedStorageAccountsNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccountsNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<DeletedStorageListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedStorageListResult" />&gt;
  - name: >-
      getDeletedStorageAccountsNext(string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<DeletedStorageListResult>)
    uid: azure-keyvault.KeyVaultClient.getDeletedStorageAccountsNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccountsNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<DeletedStorageListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.DeletedStorageListResult" />&gt;
          description: ''
  - name: >-
      getDeletedStorageAccountsNextWithHttpOperationResponse(string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedStorageAccountsNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        getDeletedStorageAccountsNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedStorageListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedStorageListResult"
          />&gt;&gt;
  - name: >-
      getDeletedStorageAccountsWithHttpOperationResponse(string, {
      customHeaders?: {[headerName: string]: string}, maxresults?: number })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedStorageAccountsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        getDeletedStorageAccountsWithHttpOperationResponse(vaultBaseUrl: string,
        options?: { customHeaders?: {[headerName: string]: string}, maxresults?:
        number }): Promise<HttpOperationResponse<DeletedStorageListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedStorageListResult"
          />&gt;&gt;
  - name: >-
      getDeletedStorageAccountWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getDeletedStorageAccountWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedStorageAccountWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<DeletedStorageBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.DeletedStorageBundle" />&gt;&gt;
  - name: getKey(string, string, string, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.getKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      getKey(string, string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<KeyBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key to get.
        - id: keyVersion
          type: string
          description: |-
            Adding the version parameter retrieves a specific
            version of a key.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
  - name: >-
      getKey(string, string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.getKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: getKeys(string, ServiceCallback<KeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getKeys_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeys(vaultBaseUrl: string, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;
          description: ''
  - name: >-
      getKeys(string, { customHeaders?: {[headerName: string]: string},
      maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getKeys
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeys(vaultBaseUrl: string, options?: { customHeaders?:
        {[headerName: string]: string}, maxresults?: number }):
        Promise<KeyListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyListResult"
          />&gt;
  - name: >-
      getKeys(string, { customHeaders?: {[headerName: string]: string},
      maxresults?: number }, ServiceCallback<KeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getKeys_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeys(vaultBaseUrl: string, options: { customHeaders?:
        {[headerName: string]: string}, maxresults?: number }, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;
          description: ''
  - name: getKeysNext(string, ServiceCallback<KeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getKeysNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeysNext(nextPageLink: string, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;
          description: ''
  - name: 'getKeysNext(string, { customHeaders?: {[headerName: string]: string} })'
    uid: azure-keyvault.KeyVaultClient.getKeysNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeysNext(nextPageLink: string, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<KeyListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyListResult"
          />&gt;
  - name: >-
      getKeysNext(string, { customHeaders?: {[headerName: string]: string} },
      ServiceCallback<KeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getKeysNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeysNext(nextPageLink: string, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;
          description: ''
  - name: >-
      getKeysNextWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getKeysNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeysNextWithHttpOperationResponse(nextPageLink: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<KeyListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;&gt;
  - name: >-
      getKeysWithHttpOperationResponse(string, { customHeaders?: {[headerName:
      string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getKeysWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeysWithHttpOperationResponse(vaultBaseUrl: string,
        options?: { customHeaders?: {[headerName: string]: string}, maxresults?:
        number }): Promise<HttpOperationResponse<KeyListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;&gt;
  - name: getKeyVersions(string, string, ServiceCallback<KeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getKeyVersions_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyVersions(vaultBaseUrl: string, keyName: string, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;
          description: ''
  - name: >-
      getKeyVersions(string, string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getKeyVersions
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyVersions(vaultBaseUrl: string, keyName: string, options?:
        { customHeaders?: {[headerName: string]: string}, maxresults?: number
        }): Promise<KeyListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyListResult"
          />&gt;
  - name: >-
      getKeyVersions(string, string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number }, ServiceCallback<KeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getKeyVersions_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyVersions(vaultBaseUrl: string, keyName: string, options:
        { customHeaders?: {[headerName: string]: string}, maxresults?: number },
        callback: ServiceCallback<KeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;
          description: ''
  - name: getKeyVersionsNext(string, ServiceCallback<KeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getKeyVersionsNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyVersionsNext(nextPageLink: string, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;
          description: ''
  - name: >-
      getKeyVersionsNext(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getKeyVersionsNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyVersionsNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<KeyListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyListResult"
          />&gt;
  - name: >-
      getKeyVersionsNext(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<KeyListResult>)
    uid: azure-keyvault.KeyVaultClient.getKeyVersionsNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyVersionsNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;
          description: ''
  - name: >-
      getKeyVersionsNextWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getKeyVersionsNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyVersionsNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<KeyListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;&gt;
  - name: >-
      getKeyVersionsWithHttpOperationResponse(string, string, { customHeaders?:
      {[headerName: string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getKeyVersionsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyVersionsWithHttpOperationResponse(vaultBaseUrl: string,
        keyName: string, options?: { customHeaders?: {[headerName: string]:
        string}, maxresults?: number }):
        Promise<HttpOperationResponse<KeyListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyListResult" />&gt;&gt;
  - name: >-
      getKeyWithHttpOperationResponse(string, string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName:
        string, keyVersion: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<KeyBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key to get.
        - id: keyVersion
          type: string
          description: |-
            Adding the version parameter retrieves a specific
            version of a key.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;&gt;
  - name: >-
      getSasDefinition(string, string, string,
      ServiceCallback<SasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.getSasDefinition_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
          description: ''
  - name: >-
      getSasDefinition(string, string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.getSasDefinition
    package: azure-keyvault
    summary: |-
      Gets information about a SAS definition for the specified storage account.
      This operation requires the storage/getsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<SasDefinitionBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
  - name: >-
      getSasDefinition(string, string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<SasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.getSasDefinition_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
          description: ''
  - name: >-
      getSasDefinitions(string, string,
      ServiceCallback<SasDefinitionListResult>)
    uid: azure-keyvault.KeyVaultClient.getSasDefinitions_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinitions(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<SasDefinitionListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionListResult" />&gt;
          description: ''
  - name: >-
      getSasDefinitions(string, string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getSasDefinitions
    package: azure-keyvault
    summary: |-
      List storage SAS definitions for the given storage account. This operation
      requires the storage/listsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinitions(vaultBaseUrl: string, storageAccountName:
        string, options?: { customHeaders?: {[headerName: string]: string},
        maxresults?: number }): Promise<SasDefinitionListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionListResult" />&gt;
  - name: >-
      getSasDefinitions(string, string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number }, ServiceCallback<SasDefinitionListResult>)
    uid: azure-keyvault.KeyVaultClient.getSasDefinitions_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinitions(vaultBaseUrl: string, storageAccountName:
        string, options: { customHeaders?: {[headerName: string]: string},
        maxresults?: number }, callback:
        ServiceCallback<SasDefinitionListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionListResult" />&gt;
          description: ''
  - name: getSasDefinitionsNext(string, ServiceCallback<SasDefinitionListResult>)
    uid: azure-keyvault.KeyVaultClient.getSasDefinitionsNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinitionsNext(nextPageLink: string, callback:
        ServiceCallback<SasDefinitionListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionListResult" />&gt;
          description: ''
  - name: >-
      getSasDefinitionsNext(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getSasDefinitionsNext
    package: azure-keyvault
    summary: |-
      List storage SAS definitions for the given storage account. This operation
      requires the storage/listsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinitionsNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<SasDefinitionListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionListResult" />&gt;
  - name: >-
      getSasDefinitionsNext(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<SasDefinitionListResult>)
    uid: azure-keyvault.KeyVaultClient.getSasDefinitionsNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinitionsNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<SasDefinitionListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionListResult" />&gt;
          description: ''
  - name: >-
      getSasDefinitionsNextWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getSasDefinitionsNextWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      List storage SAS definitions for the given storage account. This operation
      requires the storage/listsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinitionsNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<SasDefinitionListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionListResult" />&gt;&gt;
  - name: >-
      getSasDefinitionsWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getSasDefinitionsWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      List storage SAS definitions for the given storage account. This operation
      requires the storage/listsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinitionsWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, options?: { customHeaders?:
        {[headerName: string]: string}, maxresults?: number }):
        Promise<HttpOperationResponse<SasDefinitionListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionListResult" />&gt;&gt;
  - name: >-
      getSasDefinitionWithHttpOperationResponse(string, string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getSasDefinitionWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      Gets information about a SAS definition for the specified storage account.
      This operation requires the storage/getsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSasDefinitionWithHttpOperationResponse(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<SasDefinitionBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;&gt;
  - name: getSecret(string, string, string, ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.getSecret_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: secretVersion
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: >-
      getSecret(string, string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getSecret
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<SecretBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: secretVersion
          type: string
          description: The version of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.SecretBundle"
          />&gt;
  - name: >-
      getSecret(string, string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.getSecret_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, options: { customHeaders?: {[headerName: string]:
        string} }, callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: secretVersion
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: getSecrets(string, ServiceCallback<SecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getSecrets_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecrets(vaultBaseUrl: string, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;
          description: ''
  - name: >-
      getSecrets(string, { customHeaders?: {[headerName: string]: string},
      maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getSecrets
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecrets(vaultBaseUrl: string, options?: { customHeaders?:
        {[headerName: string]: string}, maxresults?: number }):
        Promise<SecretListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.SecretListResult"
          />&gt;
  - name: >-
      getSecrets(string, { customHeaders?: {[headerName: string]: string},
      maxresults?: number }, ServiceCallback<SecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getSecrets_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecrets(vaultBaseUrl: string, options: { customHeaders?:
        {[headerName: string]: string}, maxresults?: number }, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;
          description: ''
  - name: getSecretsNext(string, ServiceCallback<SecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getSecretsNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretsNext(nextPageLink: string, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;
          description: ''
  - name: 'getSecretsNext(string, { customHeaders?: {[headerName: string]: string} })'
    uid: azure-keyvault.KeyVaultClient.getSecretsNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretsNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<SecretListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.SecretListResult"
          />&gt;
  - name: >-
      getSecretsNext(string, { customHeaders?: {[headerName: string]: string} },
      ServiceCallback<SecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getSecretsNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretsNext(nextPageLink: string, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;
          description: ''
  - name: >-
      getSecretsNextWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getSecretsNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretsNextWithHttpOperationResponse(nextPageLink: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<SecretListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;&gt;
  - name: >-
      getSecretsWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getSecretsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretsWithHttpOperationResponse(vaultBaseUrl: string,
        options?: { customHeaders?: {[headerName: string]: string}, maxresults?:
        number }): Promise<HttpOperationResponse<SecretListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;&gt;
  - name: getSecretVersions(string, string, ServiceCallback<SecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getSecretVersions_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretVersions(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<SecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;
          description: ''
  - name: >-
      getSecretVersions(string, string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getSecretVersions
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretVersions(vaultBaseUrl: string, secretName: string,
        options?: { customHeaders?: {[headerName: string]: string}, maxresults?:
        number }): Promise<SecretListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.SecretListResult"
          />&gt;
  - name: >-
      getSecretVersions(string, string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number }, ServiceCallback<SecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getSecretVersions_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretVersions(vaultBaseUrl: string, secretName: string,
        options: { customHeaders?: {[headerName: string]: string}, maxresults?:
        number }, callback: ServiceCallback<SecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;
          description: ''
  - name: getSecretVersionsNext(string, ServiceCallback<SecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getSecretVersionsNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretVersionsNext(nextPageLink: string, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;
          description: ''
  - name: >-
      getSecretVersionsNext(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getSecretVersionsNext
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretVersionsNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<SecretListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.SecretListResult"
          />&gt;
  - name: >-
      getSecretVersionsNext(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<SecretListResult>)
    uid: azure-keyvault.KeyVaultClient.getSecretVersionsNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretVersionsNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;
          description: ''
  - name: >-
      getSecretVersionsNextWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getSecretVersionsNextWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretVersionsNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<SecretListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;&gt;
  - name: >-
      getSecretVersionsWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getSecretVersionsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretVersionsWithHttpOperationResponse(vaultBaseUrl:
        string, secretName: string, options?: { customHeaders?: {[headerName:
        string]: string}, maxresults?: number }):
        Promise<HttpOperationResponse<SecretListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SecretListResult" />&gt;&gt;
  - name: >-
      getSecretWithHttpOperationResponse(string, string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getSecretWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSecretWithHttpOperationResponse(vaultBaseUrl: string,
        secretName: string, secretVersion: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<SecretBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: secretVersion
          type: string
          description: The version of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;&gt;
  - name: getStorageAccount(string, string, ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.getStorageAccount_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      getStorageAccount(string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getStorageAccount
    package: azure-keyvault
    summary: >-
      Gets information about a specified storage account. This operation
      requires

      the storage/get permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<StorageBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.StorageBundle"
          />&gt;
  - name: >-
      getStorageAccount(string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.getStorageAccount_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: getStorageAccounts(string, ServiceCallback<StorageListResult>)
    uid: azure-keyvault.KeyVaultClient.getStorageAccounts_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccounts(vaultBaseUrl: string, callback:
        ServiceCallback<StorageListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageListResult" />&gt;
          description: ''
  - name: >-
      getStorageAccounts(string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getStorageAccounts
    package: azure-keyvault
    summary: |-
      List storage accounts managed by the specified key vault. This operation
      requires the storage/list permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccounts(vaultBaseUrl: string, options?: {
        customHeaders?: {[headerName: string]: string}, maxresults?: number }):
        Promise<StorageListResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.StorageListResult"
          />&gt;
  - name: >-
      getStorageAccounts(string, { customHeaders?: {[headerName: string]:
      string}, maxresults?: number }, ServiceCallback<StorageListResult>)
    uid: azure-keyvault.KeyVaultClient.getStorageAccounts_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccounts(vaultBaseUrl: string, options: {
        customHeaders?: {[headerName: string]: string}, maxresults?: number },
        callback: ServiceCallback<StorageListResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageListResult" />&gt;
          description: ''
  - name: getStorageAccountsNext(string, ServiceCallback<StorageListResult>)
    uid: azure-keyvault.KeyVaultClient.getStorageAccountsNext_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccountsNext(nextPageLink: string, callback:
        ServiceCallback<StorageListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageListResult" />&gt;
          description: ''
  - name: >-
      getStorageAccountsNext(string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.getStorageAccountsNext
    package: azure-keyvault
    summary: |-
      List storage accounts managed by the specified key vault. This operation
      requires the storage/list permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccountsNext(nextPageLink: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<StorageListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.StorageListResult"
          />&gt;
  - name: >-
      getStorageAccountsNext(string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<StorageListResult>)
    uid: azure-keyvault.KeyVaultClient.getStorageAccountsNext_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccountsNext(nextPageLink: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<StorageListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageListResult" />&gt;
          description: ''
  - name: >-
      getStorageAccountsNextWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.getStorageAccountsNextWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      List storage accounts managed by the specified key vault. This operation
      requires the storage/list permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccountsNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<StorageListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.StorageListResult" />&gt;&gt;
  - name: >-
      getStorageAccountsWithHttpOperationResponse(string, { customHeaders?:
      {[headerName: string]: string}, maxresults?: number })
    uid: azure-keyvault.KeyVaultClient.getStorageAccountsWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      List storage accounts managed by the specified key vault. This operation
      requires the storage/list permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccountsWithHttpOperationResponse(vaultBaseUrl:
        string, options?: { customHeaders?: {[headerName: string]: string},
        maxresults?: number }):
        Promise<HttpOperationResponse<StorageListResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, maxresults?:
            number }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.StorageListResult" />&gt;&gt;
  - name: >-
      getStorageAccountWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.getStorageAccountWithHttpOperationResponse
    package: azure-keyvault
    summary: >-
      Gets information about a specified storage account. This operation
      requires

      the storage/get permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStorageAccountWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<StorageBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;&gt;
  - name: >-
      importCertificate(string, string, string,
      ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.importCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function importCertificate(vaultBaseUrl: string, certificateName:
        string, base64EncodedCertificate: string, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: base64EncodedCertificate
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      importCertificate(string, string, string, { certificateAttributes?:
      CertificateAttributes, certificatePolicy?: CertificatePolicy,
      customHeaders?: {[headerName: string]: string}, password?: string, tags?:
      {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.importCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function importCertificate(vaultBaseUrl: string, certificateName:
        string, base64EncodedCertificate: string, options?: {
        certificateAttributes?: CertificateAttributes, certificatePolicy?:
        CertificatePolicy, customHeaders?: {[headerName: string]: string},
        password?: string, tags?: {[propertyName: string]: string} }):
        Promise<CertificateBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: base64EncodedCertificate
          type: string
          description: >-
            Base64 encoded representation of

            the certificate object to import. This certificate needs to contain
            the

            private key.
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, certificatePolicy?:
            CertificatePolicy, customHeaders?: {[headerName: string]: string},
            password?: string, tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.CertificateBundle"
          />&gt;
  - name: >-
      importCertificate(string, string, string, { certificateAttributes?:
      CertificateAttributes, certificatePolicy?: CertificatePolicy,
      customHeaders?: {[headerName: string]: string}, password?: string, tags?:
      {[propertyName: string]: string} }, ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.importCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function importCertificate(vaultBaseUrl: string, certificateName:
        string, base64EncodedCertificate: string, options: {
        certificateAttributes?: CertificateAttributes, certificatePolicy?:
        CertificatePolicy, customHeaders?: {[headerName: string]: string},
        password?: string, tags?: {[propertyName: string]: string} }, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: base64EncodedCertificate
          type: string
          description: ''
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, certificatePolicy?:
            CertificatePolicy, customHeaders?: {[headerName: string]: string},
            password?: string, tags?: {[propertyName: string]: string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      importCertificateWithHttpOperationResponse(string, string, string, {
      certificateAttributes?: CertificateAttributes, certificatePolicy?:
      CertificatePolicy, customHeaders?: {[headerName: string]: string},
      password?: string, tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.importCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function importCertificateWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, base64EncodedCertificate: string,
        options?: { certificateAttributes?: CertificateAttributes,
        certificatePolicy?: CertificatePolicy, customHeaders?: {[headerName:
        string]: string}, password?: string, tags?: {[propertyName: string]:
        string} }): Promise<HttpOperationResponse<CertificateBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: base64EncodedCertificate
          type: string
          description: >-
            Base64 encoded representation of

            the certificate object to import. This certificate needs to contain
            the

            private key.
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, certificatePolicy?:
            CertificatePolicy, customHeaders?: {[headerName: string]: string},
            password?: string, tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;&gt;
  - name: importKey(string, string, JsonWebKey, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.importKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function importKey(vaultBaseUrl: string, keyName: string, key:
        JsonWebKey, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: key
          type: <xref uid="azure-keyvault.KeyVaultModels.JsonWebKey" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      importKey(string, string, JsonWebKey, { customHeaders?: {[headerName:
      string]: string}, hsm?: boolean, keyAttributes?: KeyAttributes, tags?:
      {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.importKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function importKey(vaultBaseUrl: string, keyName: string, key:
        JsonWebKey, options?: { customHeaders?: {[headerName: string]: string},
        hsm?: boolean, keyAttributes?: KeyAttributes, tags?: {[propertyName:
        string]: string} }): Promise<KeyBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: Name for the imported key.
        - id: key
          type: <xref uid="azure-keyvault.KeyVaultModels.JsonWebKey" />
          description: The Json web key
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, hsm?: boolean,
            keyAttributes?: KeyAttributes, tags?: {[propertyName: string]:
            string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
  - name: >-
      importKey(string, string, JsonWebKey, { customHeaders?: {[headerName:
      string]: string}, hsm?: boolean, keyAttributes?: KeyAttributes, tags?:
      {[propertyName: string]: string} }, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.importKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function importKey(vaultBaseUrl: string, keyName: string, key:
        JsonWebKey, options: { customHeaders?: {[headerName: string]: string},
        hsm?: boolean, keyAttributes?: KeyAttributes, tags?: {[propertyName:
        string]: string} }, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: key
          type: <xref uid="azure-keyvault.KeyVaultModels.JsonWebKey" />
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, hsm?: boolean,
            keyAttributes?: KeyAttributes, tags?: {[propertyName: string]:
            string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      importKeyWithHttpOperationResponse(string, string, JsonWebKey, {
      customHeaders?: {[headerName: string]: string}, hsm?: boolean,
      keyAttributes?: KeyAttributes, tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.importKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function importKeyWithHttpOperationResponse(vaultBaseUrl: string,
        keyName: string, key: JsonWebKey, options?: { customHeaders?:
        {[headerName: string]: string}, hsm?: boolean, keyAttributes?:
        KeyAttributes, tags?: {[propertyName: string]: string} }):
        Promise<HttpOperationResponse<KeyBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: Name for the imported key.
        - id: key
          type: <xref uid="azure-keyvault.KeyVaultModels.JsonWebKey" />
          description: The Json web key
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, hsm?: boolean,
            keyAttributes?: KeyAttributes, tags?: {[propertyName: string]:
            string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;&gt;
  - name: >-
      mergeCertificate(string, string, Buffer[],
      ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.mergeCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function mergeCertificate(vaultBaseUrl: string, certificateName: string,
        x509Certificates: Buffer[], callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: x509Certificates
          type: Buffer[]
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      mergeCertificate(string, string, Buffer[], { certificateAttributes?:
      CertificateAttributes, customHeaders?: {[headerName: string]: string},
      tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.mergeCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function mergeCertificate(vaultBaseUrl: string, certificateName: string,
        x509Certificates: Buffer[], options?: { certificateAttributes?:
        CertificateAttributes, customHeaders?: {[headerName: string]: string},
        tags?: {[propertyName: string]: string} }): Promise<CertificateBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: x509Certificates
          type: Buffer[]
          description: |-
            The certificate or the certificate chain to
            merge.
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, customHeaders?:
            {[headerName: string]: string}, tags?: {[propertyName: string]:
            string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.CertificateBundle"
          />&gt;
  - name: >-
      mergeCertificate(string, string, Buffer[], { certificateAttributes?:
      CertificateAttributes, customHeaders?: {[headerName: string]: string},
      tags?: {[propertyName: string]: string} },
      ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.mergeCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function mergeCertificate(vaultBaseUrl: string, certificateName: string,
        x509Certificates: Buffer[], options: { certificateAttributes?:
        CertificateAttributes, customHeaders?: {[headerName: string]: string},
        tags?: {[propertyName: string]: string} }, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: x509Certificates
          type: Buffer[]
          description: ''
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, customHeaders?:
            {[headerName: string]: string}, tags?: {[propertyName: string]:
            string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      mergeCertificateWithHttpOperationResponse(string, string, Buffer[], {
      certificateAttributes?: CertificateAttributes, customHeaders?:
      {[headerName: string]: string}, tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.mergeCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function mergeCertificateWithHttpOperationResponse(vaultBaseUrl: string,
        certificateName: string, x509Certificates: Buffer[], options?: {
        certificateAttributes?: CertificateAttributes, customHeaders?:
        {[headerName: string]: string}, tags?: {[propertyName: string]: string}
        }): Promise<HttpOperationResponse<CertificateBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: x509Certificates
          type: Buffer[]
          description: |-
            The certificate or the certificate chain to
            merge.
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, customHeaders?:
            {[headerName: string]: string}, tags?: {[propertyName: string]:
            string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;&gt;
  - name: purgeDeletedCertificate(string, string, ServiceCallback<void>)
    uid: azure-keyvault.KeyVaultClient.purgeDeletedCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      purgeDeletedCertificate(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.purgeDeletedCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<void>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;void&gt;
  - name: >-
      purgeDeletedCertificate(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<void>)
    uid: azure-keyvault.KeyVaultClient.purgeDeletedCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      purgeDeletedCertificateWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.purgeDeletedCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedCertificateWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: purgeDeletedKey(string, string, ServiceCallback<void>)
    uid: azure-keyvault.KeyVaultClient.purgeDeletedKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedKey(vaultBaseUrl: string, keyName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      purgeDeletedKey(string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.purgeDeletedKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedKey(vaultBaseUrl: string, keyName: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<void>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;void&gt;
  - name: >-
      purgeDeletedKey(string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<void>)
    uid: azure-keyvault.KeyVaultClient.purgeDeletedKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedKey(vaultBaseUrl: string, keyName: string, options:
        { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      purgeDeletedKeyWithHttpOperationResponse(string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.purgeDeletedKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedKeyWithHttpOperationResponse(vaultBaseUrl: string,
        keyName: string, options?: { customHeaders?: {[headerName: string]:
        string} }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: purgeDeletedSecret(string, string, ServiceCallback<void>)
    uid: azure-keyvault.KeyVaultClient.purgeDeletedSecret_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      purgeDeletedSecret(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.purgeDeletedSecret
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedSecret(vaultBaseUrl: string, secretName: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<void>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;void&gt;
  - name: >-
      purgeDeletedSecret(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<void>)
    uid: azure-keyvault.KeyVaultClient.purgeDeletedSecret_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedSecret(vaultBaseUrl: string, secretName: string,
        options: { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      purgeDeletedSecretWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.purgeDeletedSecretWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedSecretWithHttpOperationResponse(vaultBaseUrl:
        string, secretName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: purgeDeletedStorageAccount(string, string, ServiceCallback<void>)
    uid: azure-keyvault.KeyVaultClient.purgeDeletedStorageAccount_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      purgeDeletedStorageAccount(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.purgeDeletedStorageAccount
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<void>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;void&gt;
  - name: >-
      purgeDeletedStorageAccount(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<void>)
    uid: azure-keyvault.KeyVaultClient.purgeDeletedStorageAccount_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options: { customHeaders?: {[headerName:
        string]: string} }, callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      purgeDeletedStorageAccountWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.purgeDeletedStorageAccountWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        purgeDeletedStorageAccountWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: >-
      recoverDeletedCertificate(string, string,
      ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedCertificate(vaultBaseUrl: string,
        certificateName: string, callback: ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedCertificate(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.recoverDeletedCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedCertificate(vaultBaseUrl: string,
        certificateName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<CertificateBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the deleted certificate
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.CertificateBundle"
          />&gt;
  - name: >-
      recoverDeletedCertificate(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedCertificate(vaultBaseUrl: string,
        certificateName: string, options: { customHeaders?: {[headerName:
        string]: string} }, callback: ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedCertificateWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.recoverDeletedCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        recoverDeletedCertificateWithHttpOperationResponse(vaultBaseUrl: string,
        certificateName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<CertificateBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the deleted certificate
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;&gt;
  - name: recoverDeletedKey(string, string, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedKey(vaultBaseUrl: string, keyName: string,
        callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedKey(string, string, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.recoverDeletedKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedKey(vaultBaseUrl: string, keyName: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<KeyBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the deleted key.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
  - name: >-
      recoverDeletedKey(string, string, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedKey(vaultBaseUrl: string, keyName: string,
        options: { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedKeyWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.recoverDeletedKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedKeyWithHttpOperationResponse(vaultBaseUrl:
        string, keyName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<KeyBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the deleted key.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;&gt;
  - name: >-
      recoverDeletedSasDefinition(string, string, string,
      ServiceCallback<SasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedSasDefinition_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedSasDefinition(string, string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.recoverDeletedSasDefinition
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<SasDefinitionBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
  - name: >-
      recoverDeletedSasDefinition(string, string, string, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<SasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedSasDefinition_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedSasDefinitionWithHttpOperationResponse(string, string,
      string, { customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.recoverDeletedSasDefinitionWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        recoverDeletedSasDefinitionWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, sasDefinitionName: string, options?:
        { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<SasDefinitionBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;&gt;
  - name: recoverDeletedSecret(string, string, ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedSecret_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedSecret(string, string, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.recoverDeletedSecret
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedSecret(vaultBaseUrl: string, secretName: string,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<SecretBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the deleted secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.SecretBundle"
          />&gt;
  - name: >-
      recoverDeletedSecret(string, string, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedSecret_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedSecret(vaultBaseUrl: string, secretName: string,
        options: { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedSecretWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.recoverDeletedSecretWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedSecretWithHttpOperationResponse(vaultBaseUrl:
        string, secretName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<SecretBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the deleted secret.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;&gt;
  - name: >-
      recoverDeletedStorageAccount(string, string,
      ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedStorageAccount_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedStorageAccount(string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.recoverDeletedStorageAccount
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<StorageBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.StorageBundle"
          />&gt;
  - name: >-
      recoverDeletedStorageAccount(string, string, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.recoverDeletedStorageAccount_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options: { customHeaders?: {[headerName:
        string]: string} }, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      recoverDeletedStorageAccountWithHttpOperationResponse(string, string, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.recoverDeletedStorageAccountWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        recoverDeletedStorageAccountWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<StorageBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;&gt;
  - name: >-
      regenerateStorageAccountKey(string, string, string,
      ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.regenerateStorageAccountKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function regenerateStorageAccountKey(vaultBaseUrl: string,
        storageAccountName: string, keyName: string, callback:
        ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      regenerateStorageAccountKey(string, string, string, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.regenerateStorageAccountKey
    package: azure-keyvault
    summary: |-
      Regenerates the specified key value for the given storage account. This
      operation requires the storage/regeneratekey permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function regenerateStorageAccountKey(vaultBaseUrl: string,
        storageAccountName: string, keyName: string, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<StorageBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: keyName
          type: string
          description: The storage account key name.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.StorageBundle"
          />&gt;
  - name: >-
      regenerateStorageAccountKey(string, string, string, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.regenerateStorageAccountKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function regenerateStorageAccountKey(vaultBaseUrl: string,
        storageAccountName: string, keyName: string, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      regenerateStorageAccountKeyWithHttpOperationResponse(string, string,
      string, { customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.regenerateStorageAccountKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      Regenerates the specified key value for the given storage account. This
      operation requires the storage/regeneratekey permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        regenerateStorageAccountKeyWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, keyName: string, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<StorageBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: keyName
          type: string
          description: The storage account key name.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;&gt;
  - name: restoreCertificate(string, Buffer, ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.restoreCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreCertificate(vaultBaseUrl: string,
        certificateBundleBackup: Buffer, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateBundleBackup
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      restoreCertificate(string, Buffer, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.restoreCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreCertificate(vaultBaseUrl: string,
        certificateBundleBackup: Buffer, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<CertificateBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateBundleBackup
          type: Buffer
          description: |-
            The backup blob associated with a
            certificate bundle.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.CertificateBundle"
          />&gt;
  - name: >-
      restoreCertificate(string, Buffer, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.restoreCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreCertificate(vaultBaseUrl: string,
        certificateBundleBackup: Buffer, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateBundleBackup
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      restoreCertificateWithHttpOperationResponse(string, Buffer, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.restoreCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreCertificateWithHttpOperationResponse(vaultBaseUrl:
        string, certificateBundleBackup: Buffer, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificateBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateBundleBackup
          type: Buffer
          description: |-
            The backup blob associated with a
            certificate bundle.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;&gt;
  - name: restoreKey(string, Buffer, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.restoreKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreKey(vaultBaseUrl: string, keyBundleBackup: Buffer,
        callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyBundleBackup
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      restoreKey(string, Buffer, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.restoreKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreKey(vaultBaseUrl: string, keyBundleBackup: Buffer,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<KeyBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyBundleBackup
          type: Buffer
          description: |-
            The backup blob associated with a key
            bundle.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
  - name: >-
      restoreKey(string, Buffer, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.restoreKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreKey(vaultBaseUrl: string, keyBundleBackup: Buffer,
        options: { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyBundleBackup
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      restoreKeyWithHttpOperationResponse(string, Buffer, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.restoreKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreKeyWithHttpOperationResponse(vaultBaseUrl: string,
        keyBundleBackup: Buffer, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<KeyBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyBundleBackup
          type: Buffer
          description: |-
            The backup blob associated with a key
            bundle.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;&gt;
  - name: restoreSecret(string, Buffer, ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.restoreSecret_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreSecret(vaultBaseUrl: string, secretBundleBackup: Buffer,
        callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretBundleBackup
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: >-
      restoreSecret(string, Buffer, { customHeaders?: {[headerName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.restoreSecret
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreSecret(vaultBaseUrl: string, secretBundleBackup: Buffer,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<SecretBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretBundleBackup
          type: Buffer
          description: |-
            The backup blob associated with a secret
            bundle.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.SecretBundle"
          />&gt;
  - name: >-
      restoreSecret(string, Buffer, { customHeaders?: {[headerName: string]:
      string} }, ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.restoreSecret_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreSecret(vaultBaseUrl: string, secretBundleBackup: Buffer,
        options: { customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretBundleBackup
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: >-
      restoreSecretWithHttpOperationResponse(string, Buffer, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.restoreSecretWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreSecretWithHttpOperationResponse(vaultBaseUrl: string,
        secretBundleBackup: Buffer, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<SecretBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretBundleBackup
          type: Buffer
          description: |-
            The backup blob associated with a secret
            bundle.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;&gt;
  - name: restoreStorageAccount(string, Buffer, ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.restoreStorageAccount_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreStorageAccount(vaultBaseUrl: string,
        storageBundleBackup: Buffer, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageBundleBackup
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      restoreStorageAccount(string, Buffer, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.restoreStorageAccount
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreStorageAccount(vaultBaseUrl: string,
        storageBundleBackup: Buffer, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<StorageBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageBundleBackup
          type: Buffer
          description: |-
            The backup blob associated with a
            storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.StorageBundle"
          />&gt;
  - name: >-
      restoreStorageAccount(string, Buffer, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.restoreStorageAccount_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreStorageAccount(vaultBaseUrl: string,
        storageBundleBackup: Buffer, options: { customHeaders?: {[headerName:
        string]: string} }, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageBundleBackup
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      restoreStorageAccountWithHttpOperationResponse(string, Buffer, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.restoreStorageAccountWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreStorageAccountWithHttpOperationResponse(vaultBaseUrl:
        string, storageBundleBackup: Buffer, options?: { customHeaders?:
        {[headerName: string]: string} }):
        Promise<HttpOperationResponse<StorageBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageBundleBackup
          type: Buffer
          description: |-
            The backup blob associated with a
            storage account.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;&gt;
  - name: setCertificateContacts(string, Contacts, ServiceCallback<Contacts>)
    uid: azure-keyvault.KeyVaultClient.setCertificateContacts_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCertificateContacts(vaultBaseUrl: string, contacts:
        Contacts, callback: ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: contacts
          type: <xref uid="azure-keyvault.KeyVaultModels.Contacts" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;
          description: ''
  - name: >-
      setCertificateContacts(string, Contacts, { customHeaders?: {[headerName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.setCertificateContacts
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCertificateContacts(vaultBaseUrl: string, contacts:
        Contacts, options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<Contacts>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: contacts
          type: <xref uid="azure-keyvault.KeyVaultModels.Contacts" />
          description: The contacts for the key vault certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;
  - name: >-
      setCertificateContacts(string, Contacts, { customHeaders?: {[headerName:
      string]: string} }, ServiceCallback<Contacts>)
    uid: azure-keyvault.KeyVaultClient.setCertificateContacts_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCertificateContacts(vaultBaseUrl: string, contacts:
        Contacts, options: { customHeaders?: {[headerName: string]: string} },
        callback: ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: contacts
          type: <xref uid="azure-keyvault.KeyVaultModels.Contacts" />
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;
          description: ''
  - name: >-
      setCertificateContactsWithHttpOperationResponse(string, Contacts, {
      customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.setCertificateContactsWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCertificateContactsWithHttpOperationResponse(vaultBaseUrl:
        string, contacts: Contacts, options?: { customHeaders?: {[headerName:
        string]: string} }): Promise<HttpOperationResponse<Contacts>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: contacts
          type: <xref uid="azure-keyvault.KeyVaultModels.Contacts" />
          description: The contacts for the key vault certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.Contacts" />&gt;&gt;
  - name: >-
      setCertificateIssuer(string, string, string,
      ServiceCallback<IssuerBundle>)
    uid: azure-keyvault.KeyVaultClient.setCertificateIssuer_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        provider: string, callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: issuerName
          type: string
          description: ''
        - id: provider
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;
          description: ''
  - name: >-
      setCertificateIssuer(string, string, string, { attributes?:
      IssuerAttributes, credentials?: IssuerCredentials, customHeaders?:
      {[headerName: string]: string}, organizationDetails?: OrganizationDetails
      })
    uid: azure-keyvault.KeyVaultClient.setCertificateIssuer
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        provider: string, options?: { attributes?: IssuerAttributes,
        credentials?: IssuerCredentials, customHeaders?: {[headerName: string]:
        string}, organizationDetails?: OrganizationDetails }):
        Promise<IssuerBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: issuerName
          type: string
          description: The name of the issuer.
        - id: provider
          type: string
          description: The issuer provider.
        - id: options
          type: >-
            { attributes?: IssuerAttributes, credentials?: IssuerCredentials,
            customHeaders?: {[headerName: string]: string},
            organizationDetails?: OrganizationDetails }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.IssuerBundle"
          />&gt;
  - name: >-
      setCertificateIssuer(string, string, string, { attributes?:
      IssuerAttributes, credentials?: IssuerCredentials, customHeaders?:
      {[headerName: string]: string}, organizationDetails?: OrganizationDetails
      }, ServiceCallback<IssuerBundle>)
    uid: azure-keyvault.KeyVaultClient.setCertificateIssuer_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        provider: string, options: { attributes?: IssuerAttributes,
        credentials?: IssuerCredentials, customHeaders?: {[headerName: string]:
        string}, organizationDetails?: OrganizationDetails }, callback:
        ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: issuerName
          type: string
          description: ''
        - id: provider
          type: string
          description: ''
        - id: options
          type: >-
            { attributes?: IssuerAttributes, credentials?: IssuerCredentials,
            customHeaders?: {[headerName: string]: string},
            organizationDetails?: OrganizationDetails }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;
          description: ''
  - name: >-
      setCertificateIssuerWithHttpOperationResponse(string, string, string, {
      attributes?: IssuerAttributes, credentials?: IssuerCredentials,
      customHeaders?: {[headerName: string]: string}, organizationDetails?:
      OrganizationDetails })
    uid: >-
      azure-keyvault.KeyVaultClient.setCertificateIssuerWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCertificateIssuerWithHttpOperationResponse(vaultBaseUrl:
        string, issuerName: string, provider: string, options?: { attributes?:
        IssuerAttributes, credentials?: IssuerCredentials, customHeaders?:
        {[headerName: string]: string}, organizationDetails?:
        OrganizationDetails }): Promise<HttpOperationResponse<IssuerBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: issuerName
          type: string
          description: The name of the issuer.
        - id: provider
          type: string
          description: The issuer provider.
        - id: options
          type: >-
            { attributes?: IssuerAttributes, credentials?: IssuerCredentials,
            customHeaders?: {[headerName: string]: string},
            organizationDetails?: OrganizationDetails }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;&gt;
  - name: >-
      setSasDefinition(string, string, string, string, string, string,
      ServiceCallback<SasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.setSasDefinition_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, templateUri: string, sasType: string,
        validityPeriod: string, callback: ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: templateUri
          type: string
          description: ''
        - id: sasType
          type: string
          description: ''
        - id: validityPeriod
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
          description: ''
  - name: >-
      setSasDefinition(string, string, string, string, string, string, {
      customHeaders?: {[headerName: string]: string}, sasDefinitionAttributes?:
      SasDefinitionAttributes, tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.setSasDefinition
    package: azure-keyvault
    summary: |-
      Creates or updates a new SAS definition for the specified storage account.
      This operation requires the storage/setsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, templateUri: string, sasType: string,
        validityPeriod: string, options?: { customHeaders?: {[headerName:
        string]: string}, sasDefinitionAttributes?: SasDefinitionAttributes,
        tags?: {[propertyName: string]: string} }): Promise<SasDefinitionBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: templateUri
          type: string
          description: >-
            The SAS definition token template signed with an

            arbitrary key.  Tokens created according to the SAS definition will
            have the

            same properties as the template.
        - id: sasType
          type: string
          description: |-
            The type of SAS token the SAS definition will
            create. Possible values include: 'account', 'service'
        - id: validityPeriod
          type: string
          description: |-
            The validity period of SAS tokens created
            according to the SAS definition.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string},
            sasDefinitionAttributes?: SasDefinitionAttributes, tags?:
            {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
  - name: >-
      setSasDefinition(string, string, string, string, string, string, {
      customHeaders?: {[headerName: string]: string}, sasDefinitionAttributes?:
      SasDefinitionAttributes, tags?: {[propertyName: string]: string} },
      ServiceCallback<SasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.setSasDefinition_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, templateUri: string, sasType: string,
        validityPeriod: string, options: { customHeaders?: {[headerName:
        string]: string}, sasDefinitionAttributes?: SasDefinitionAttributes,
        tags?: {[propertyName: string]: string} }, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: templateUri
          type: string
          description: ''
        - id: sasType
          type: string
          description: ''
        - id: validityPeriod
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string},
            sasDefinitionAttributes?: SasDefinitionAttributes, tags?:
            {[propertyName: string]: string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
          description: ''
  - name: >-
      setSasDefinitionWithHttpOperationResponse(string, string, string, string,
      string, string, { customHeaders?: {[headerName: string]: string},
      sasDefinitionAttributes?: SasDefinitionAttributes, tags?: {[propertyName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.setSasDefinitionWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      Creates or updates a new SAS definition for the specified storage account.
      This operation requires the storage/setsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setSasDefinitionWithHttpOperationResponse(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, templateUri:
        string, sasType: string, validityPeriod: string, options?: {
        customHeaders?: {[headerName: string]: string},
        sasDefinitionAttributes?: SasDefinitionAttributes, tags?:
        {[propertyName: string]: string} }):
        Promise<HttpOperationResponse<SasDefinitionBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: templateUri
          type: string
          description: >-
            The SAS definition token template signed with an

            arbitrary key.  Tokens created according to the SAS definition will
            have the

            same properties as the template.
        - id: sasType
          type: string
          description: |-
            The type of SAS token the SAS definition will
            create. Possible values include: 'account', 'service'
        - id: validityPeriod
          type: string
          description: |-
            The validity period of SAS tokens created
            according to the SAS definition.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string},
            sasDefinitionAttributes?: SasDefinitionAttributes, tags?:
            {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;&gt;
  - name: setSecret(string, string, string, ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.setSecret_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setSecret(vaultBaseUrl: string, secretName: string, value:
        string, callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: value
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: >-
      setSecret(string, string, string, { contentType?: string, customHeaders?:
      {[headerName: string]: string}, secretAttributes?: SecretAttributes,
      tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.setSecret
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setSecret(vaultBaseUrl: string, secretName: string, value:
        string, options?: { contentType?: string, customHeaders?: {[headerName:
        string]: string}, secretAttributes?: SecretAttributes, tags?:
        {[propertyName: string]: string} }): Promise<SecretBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: value
          type: string
          description: The value of the secret.
        - id: options
          type: >-
            { contentType?: string, customHeaders?: {[headerName: string]:
            string}, secretAttributes?: SecretAttributes, tags?: {[propertyName:
            string]: string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.SecretBundle"
          />&gt;
  - name: >-
      setSecret(string, string, string, { contentType?: string, customHeaders?:
      {[headerName: string]: string}, secretAttributes?: SecretAttributes,
      tags?: {[propertyName: string]: string} }, ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.setSecret_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setSecret(vaultBaseUrl: string, secretName: string, value:
        string, options: { contentType?: string, customHeaders?: {[headerName:
        string]: string}, secretAttributes?: SecretAttributes, tags?:
        {[propertyName: string]: string} }, callback:
        ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: value
          type: string
          description: ''
        - id: options
          type: >-
            { contentType?: string, customHeaders?: {[headerName: string]:
            string}, secretAttributes?: SecretAttributes, tags?: {[propertyName:
            string]: string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: >-
      setSecretWithHttpOperationResponse(string, string, string, { contentType?:
      string, customHeaders?: {[headerName: string]: string}, secretAttributes?:
      SecretAttributes, tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.setSecretWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setSecretWithHttpOperationResponse(vaultBaseUrl: string,
        secretName: string, value: string, options?: { contentType?: string,
        customHeaders?: {[headerName: string]: string}, secretAttributes?:
        SecretAttributes, tags?: {[propertyName: string]: string} }):
        Promise<HttpOperationResponse<SecretBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: value
          type: string
          description: The value of the secret.
        - id: options
          type: >-
            { contentType?: string, customHeaders?: {[headerName: string]:
            string}, secretAttributes?: SecretAttributes, tags?: {[propertyName:
            string]: string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;&gt;
  - name: >-
      setStorageAccount(string, string, string, string, boolean,
      ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.setStorageAccount_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, resourceId: string, activeKeyName: string, autoRegenerateKey:
        boolean, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: resourceId
          type: string
          description: ''
        - id: activeKeyName
          type: string
          description: ''
        - id: autoRegenerateKey
          type: boolean
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      setStorageAccount(string, string, string, string, boolean, {
      customHeaders?: {[headerName: string]: string}, regenerationPeriod?:
      string, storageAccountAttributes?: StorageAccountAttributes, tags?:
      {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.setStorageAccount
    package: azure-keyvault
    summary: |-
      Creates or updates a new storage account. This operation requires the
      storage/set permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, resourceId: string, activeKeyName: string, autoRegenerateKey:
        boolean, options?: { customHeaders?: {[headerName: string]: string},
        regenerationPeriod?: string, storageAccountAttributes?:
        StorageAccountAttributes, tags?: {[propertyName: string]: string} }):
        Promise<StorageBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: resourceId
          type: string
          description: Storage account resource id.
        - id: activeKeyName
          type: string
          description: Current active storage account key name.
        - id: autoRegenerateKey
          type: boolean
          description: |-
            whether keyvault should manage the
            storage account for the user.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string},
            regenerationPeriod?: string, storageAccountAttributes?:
            StorageAccountAttributes, tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.StorageBundle"
          />&gt;
  - name: >-
      setStorageAccount(string, string, string, string, boolean, {
      customHeaders?: {[headerName: string]: string}, regenerationPeriod?:
      string, storageAccountAttributes?: StorageAccountAttributes, tags?:
      {[propertyName: string]: string} }, ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.setStorageAccount_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, resourceId: string, activeKeyName: string, autoRegenerateKey:
        boolean, options: { customHeaders?: {[headerName: string]: string},
        regenerationPeriod?: string, storageAccountAttributes?:
        StorageAccountAttributes, tags?: {[propertyName: string]: string} },
        callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: resourceId
          type: string
          description: ''
        - id: activeKeyName
          type: string
          description: ''
        - id: autoRegenerateKey
          type: boolean
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string},
            regenerationPeriod?: string, storageAccountAttributes?:
            StorageAccountAttributes, tags?: {[propertyName: string]: string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      setStorageAccountWithHttpOperationResponse(string, string, string, string,
      boolean, { customHeaders?: {[headerName: string]: string},
      regenerationPeriod?: string, storageAccountAttributes?:
      StorageAccountAttributes, tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.setStorageAccountWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      Creates or updates a new storage account. This operation requires the
      storage/set permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setStorageAccountWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, resourceId: string, activeKeyName:
        string, autoRegenerateKey: boolean, options?: { customHeaders?:
        {[headerName: string]: string}, regenerationPeriod?: string,
        storageAccountAttributes?: StorageAccountAttributes, tags?:
        {[propertyName: string]: string} }):
        Promise<HttpOperationResponse<StorageBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: resourceId
          type: string
          description: Storage account resource id.
        - id: activeKeyName
          type: string
          description: Current active storage account key name.
        - id: autoRegenerateKey
          type: boolean
          description: |-
            whether keyvault should manage the
            storage account for the user.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string},
            regenerationPeriod?: string, storageAccountAttributes?:
            StorageAccountAttributes, tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;&gt;
  - name: >-
      sign(string, string, string, string, Buffer,
      ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.sign_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sign(vaultBaseUrl: string, keyName: string, keyVersion: string,
        algorithm: string, value: Buffer, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      sign(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.sign
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sign(vaultBaseUrl: string, keyName: string, keyVersion: string,
        algorithm: string, value: Buffer, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<KeyOperationResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: >-
            The signing/verification algorithm identifier. For

            more information on possible algorithm types, see

            JsonWebKeySignatureAlgorithm. Possible values include: 'PS256',
            'PS384',

            'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384',
            'ES512',

            'ES256K'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
  - name: >-
      sign(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.sign_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sign(vaultBaseUrl: string, keyName: string, keyVersion: string,
        algorithm: string, value: Buffer, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      signWithHttpOperationResponse(string, string, string, string, Buffer, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.signWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function signWithHttpOperationResponse(vaultBaseUrl: string, keyName:
        string, keyVersion: string, algorithm: string, value: Buffer, options?:
        { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<KeyOperationResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: >-
            The signing/verification algorithm identifier. For

            more information on possible algorithm types, see

            JsonWebKeySignatureAlgorithm. Possible values include: 'PS256',
            'PS384',

            'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384',
            'ES512',

            'ES256K'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;&gt;
  - name: >-
      unwrapKey(string, string, string, string, Buffer,
      ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.unwrapKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      unwrapKey(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.unwrapKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<KeyOperationResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: |-
            algorithm identifier. Possible values include:
            'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
  - name: >-
      unwrapKey(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.unwrapKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      unwrapKeyWithHttpOperationResponse(string, string, string, string, Buffer,
      { customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.unwrapKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unwrapKeyWithHttpOperationResponse(vaultBaseUrl: string,
        keyName: string, keyVersion: string, algorithm: string, value: Buffer,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<KeyOperationResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: |-
            algorithm identifier. Possible values include:
            'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;&gt;
  - name: >-
      updateCertificate(string, string, string,
      ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.updateCertificate_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificate(vaultBaseUrl: string, certificateName:
        string, certificateVersion: string, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: certificateVersion
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: >-
      updateCertificate(string, string, string, { certificateAttributes?:
      CertificateAttributes, certificatePolicy?: CertificatePolicy,
      customHeaders?: {[headerName: string]: string}, tags?: {[propertyName:
      string]: string} })
    uid: azure-keyvault.KeyVaultClient.updateCertificate
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificate(vaultBaseUrl: string, certificateName:
        string, certificateVersion: string, options?: { certificateAttributes?:
        CertificateAttributes, certificatePolicy?: CertificatePolicy,
        customHeaders?: {[headerName: string]: string}, tags?: {[propertyName:
        string]: string} }): Promise<CertificateBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: |-
            The name of the certificate in the given key
            vault.
        - id: certificateVersion
          type: string
          description: The version of the certificate.
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, certificatePolicy?:
            CertificatePolicy, customHeaders?: {[headerName: string]: string},
            tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.CertificateBundle"
          />&gt;
  - name: >-
      updateCertificate(string, string, string, { certificateAttributes?:
      CertificateAttributes, certificatePolicy?: CertificatePolicy,
      customHeaders?: {[headerName: string]: string}, tags?: {[propertyName:
      string]: string} }, ServiceCallback<CertificateBundle>)
    uid: azure-keyvault.KeyVaultClient.updateCertificate_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificate(vaultBaseUrl: string, certificateName:
        string, certificateVersion: string, options: { certificateAttributes?:
        CertificateAttributes, certificatePolicy?: CertificatePolicy,
        customHeaders?: {[headerName: string]: string}, tags?: {[propertyName:
        string]: string} }, callback: ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: certificateVersion
          type: string
          description: ''
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, certificatePolicy?:
            CertificatePolicy, customHeaders?: {[headerName: string]: string},
            tags?: {[propertyName: string]: string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;
          description: ''
  - name: updateCertificateIssuer(string, string, ServiceCallback<IssuerBundle>)
    uid: azure-keyvault.KeyVaultClient.updateCertificateIssuer_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: issuerName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;
          description: ''
  - name: >-
      updateCertificateIssuer(string, string, { attributes?: IssuerAttributes,
      credentials?: IssuerCredentials, customHeaders?: {[headerName: string]:
      string}, organizationDetails?: OrganizationDetails, provider?: string })
    uid: azure-keyvault.KeyVaultClient.updateCertificateIssuer
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, options?: { attributes?: IssuerAttributes, credentials?:
        IssuerCredentials, customHeaders?: {[headerName: string]: string},
        organizationDetails?: OrganizationDetails, provider?: string }):
        Promise<IssuerBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: issuerName
          type: string
          description: The name of the issuer.
        - id: options
          type: >-
            { attributes?: IssuerAttributes, credentials?: IssuerCredentials,
            customHeaders?: {[headerName: string]: string},
            organizationDetails?: OrganizationDetails, provider?: string }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.IssuerBundle"
          />&gt;
  - name: >-
      updateCertificateIssuer(string, string, { attributes?: IssuerAttributes,
      credentials?: IssuerCredentials, customHeaders?: {[headerName: string]:
      string}, organizationDetails?: OrganizationDetails, provider?: string },
      ServiceCallback<IssuerBundle>)
    uid: azure-keyvault.KeyVaultClient.updateCertificateIssuer_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, options: { attributes?: IssuerAttributes, credentials?:
        IssuerCredentials, customHeaders?: {[headerName: string]: string},
        organizationDetails?: OrganizationDetails, provider?: string },
        callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: issuerName
          type: string
          description: ''
        - id: options
          type: >-
            { attributes?: IssuerAttributes, credentials?: IssuerCredentials,
            customHeaders?: {[headerName: string]: string},
            organizationDetails?: OrganizationDetails, provider?: string }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;
          description: ''
  - name: >-
      updateCertificateIssuerWithHttpOperationResponse(string, string, {
      attributes?: IssuerAttributes, credentials?: IssuerCredentials,
      customHeaders?: {[headerName: string]: string}, organizationDetails?:
      OrganizationDetails, provider?: string })
    uid: >-
      azure-keyvault.KeyVaultClient.updateCertificateIssuerWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificateIssuerWithHttpOperationResponse(vaultBaseUrl:
        string, issuerName: string, options?: { attributes?: IssuerAttributes,
        credentials?: IssuerCredentials, customHeaders?: {[headerName: string]:
        string}, organizationDetails?: OrganizationDetails, provider?: string
        }): Promise<HttpOperationResponse<IssuerBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: issuerName
          type: string
          description: The name of the issuer.
        - id: options
          type: >-
            { attributes?: IssuerAttributes, credentials?: IssuerCredentials,
            customHeaders?: {[headerName: string]: string},
            organizationDetails?: OrganizationDetails, provider?: string }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.IssuerBundle" />&gt;&gt;
  - name: >-
      updateCertificateOperation(string, string, boolean,
      ServiceCallback<CertificateOperation>)
    uid: azure-keyvault.KeyVaultClient.updateCertificateOperation_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificateOperation(vaultBaseUrl: string,
        certificateName: string, cancellationRequested: boolean, callback:
        ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: cancellationRequested
          type: boolean
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
          description: ''
  - name: >-
      updateCertificateOperation(string, string, boolean, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.updateCertificateOperation
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificateOperation(vaultBaseUrl: string,
        certificateName: string, cancellationRequested: boolean, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<CertificateOperation>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: cancellationRequested
          type: boolean
          description: |-
            Indicates if cancellation was
            requested on the certificate operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
  - name: >-
      updateCertificateOperation(string, string, boolean, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<CertificateOperation>)
    uid: azure-keyvault.KeyVaultClient.updateCertificateOperation_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificateOperation(vaultBaseUrl: string,
        certificateName: string, cancellationRequested: boolean, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: cancellationRequested
          type: boolean
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;
          description: ''
  - name: >-
      updateCertificateOperationWithHttpOperationResponse(string, string,
      boolean, { customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.updateCertificateOperationWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        updateCertificateOperationWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, cancellationRequested: boolean,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificateOperation>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: The name of the certificate.
        - id: cancellationRequested
          type: boolean
          description: |-
            Indicates if cancellation was
            requested on the certificate operation.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateOperation" />&gt;&gt;
  - name: >-
      updateCertificatePolicy(string, string, CertificatePolicy,
      ServiceCallback<CertificatePolicy>)
    uid: azure-keyvault.KeyVaultClient.updateCertificatePolicy_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, certificatePolicy: CertificatePolicy, callback:
        ServiceCallback<CertificatePolicy>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: certificatePolicy
          type: <xref uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />&gt;
          description: ''
  - name: >-
      updateCertificatePolicy(string, string, CertificatePolicy, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.updateCertificatePolicy
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, certificatePolicy: CertificatePolicy, options?: {
        customHeaders?: {[headerName: string]: string} }):
        Promise<CertificatePolicy>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: |-
            The name of the certificate in the given
            vault.
        - id: certificatePolicy
          type: <xref uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />
          description: The policy for the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.CertificatePolicy"
          />&gt;
  - name: >-
      updateCertificatePolicy(string, string, CertificatePolicy, {
      customHeaders?: {[headerName: string]: string} },
      ServiceCallback<CertificatePolicy>)
    uid: azure-keyvault.KeyVaultClient.updateCertificatePolicy_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, certificatePolicy: CertificatePolicy, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<CertificatePolicy>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: certificateName
          type: string
          description: ''
        - id: certificatePolicy
          type: <xref uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />&gt;
          description: ''
  - name: >-
      updateCertificatePolicyWithHttpOperationResponse(string, string,
      CertificatePolicy, { customHeaders?: {[headerName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.updateCertificatePolicyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificatePolicyWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, certificatePolicy: CertificatePolicy,
        options?: { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<CertificatePolicy>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: |-
            The name of the certificate in the given
            vault.
        - id: certificatePolicy
          type: <xref uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />
          description: The policy for the certificate.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificatePolicy" />&gt;&gt;
  - name: >-
      updateCertificateWithHttpOperationResponse(string, string, string, {
      certificateAttributes?: CertificateAttributes, certificatePolicy?:
      CertificatePolicy, customHeaders?: {[headerName: string]: string}, tags?:
      {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.updateCertificateWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCertificateWithHttpOperationResponse(vaultBaseUrl:
        string, certificateName: string, certificateVersion: string, options?: {
        certificateAttributes?: CertificateAttributes, certificatePolicy?:
        CertificatePolicy, customHeaders?: {[headerName: string]: string},
        tags?: {[propertyName: string]: string} }):
        Promise<HttpOperationResponse<CertificateBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: certificateName
          type: string
          description: |-
            The name of the certificate in the given key
            vault.
        - id: certificateVersion
          type: string
          description: The version of the certificate.
        - id: options
          type: >-
            { certificateAttributes?: CertificateAttributes, certificatePolicy?:
            CertificatePolicy, customHeaders?: {[headerName: string]: string},
            tags?: {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.CertificateBundle" />&gt;&gt;
  - name: updateKey(string, string, string, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.updateKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      updateKey(string, string, string, { customHeaders?: {[headerName: string]:
      string}, keyAttributes?: KeyAttributes, keyOps?: string[], tags?:
      {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.updateKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, options?: { customHeaders?: {[headerName: string]: string},
        keyAttributes?: KeyAttributes, keyOps?: string[], tags?: {[propertyName:
        string]: string} }): Promise<KeyBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of key to update.
        - id: keyVersion
          type: string
          description: The version of the key to update.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, keyAttributes?:
            KeyAttributes, keyOps?: string[], tags?: {[propertyName: string]:
            string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
  - name: >-
      updateKey(string, string, string, { customHeaders?: {[headerName: string]:
      string}, keyAttributes?: KeyAttributes, keyOps?: string[], tags?:
      {[propertyName: string]: string} }, ServiceCallback<KeyBundle>)
    uid: azure-keyvault.KeyVaultClient.updateKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, options: { customHeaders?: {[headerName: string]: string},
        keyAttributes?: KeyAttributes, keyOps?: string[], tags?: {[propertyName:
        string]: string} }, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, keyAttributes?:
            KeyAttributes, keyOps?: string[], tags?: {[propertyName: string]:
            string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;
          description: ''
  - name: >-
      updateKeyWithHttpOperationResponse(string, string, string, {
      customHeaders?: {[headerName: string]: string}, keyAttributes?:
      KeyAttributes, keyOps?: string[], tags?: {[propertyName: string]: string}
      })
    uid: azure-keyvault.KeyVaultClient.updateKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateKeyWithHttpOperationResponse(vaultBaseUrl: string,
        keyName: string, keyVersion: string, options?: { customHeaders?:
        {[headerName: string]: string}, keyAttributes?: KeyAttributes, keyOps?:
        string[], tags?: {[propertyName: string]: string} }):
        Promise<HttpOperationResponse<KeyBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of key to update.
        - id: keyVersion
          type: string
          description: The version of the key to update.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string}, keyAttributes?:
            KeyAttributes, keyOps?: string[], tags?: {[propertyName: string]:
            string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyBundle" />&gt;&gt;
  - name: >-
      updateSasDefinition(string, string, string,
      ServiceCallback<SasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.updateSasDefinition_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
          description: ''
  - name: >-
      updateSasDefinition(string, string, string, { customHeaders?:
      {[headerName: string]: string}, sasDefinitionAttributes?:
      SasDefinitionAttributes, sasType?: string, tags?: {[propertyName: string]:
      string}, templateUri?: string, validityPeriod?: string })
    uid: azure-keyvault.KeyVaultClient.updateSasDefinition
    package: azure-keyvault
    summary: |-
      Updates the specified attributes associated with the given SAS definition.
      This operation requires the storage/setsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options?: { customHeaders?:
        {[headerName: string]: string}, sasDefinitionAttributes?:
        SasDefinitionAttributes, sasType?: string, tags?: {[propertyName:
        string]: string}, templateUri?: string, validityPeriod?: string }):
        Promise<SasDefinitionBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string},
            sasDefinitionAttributes?: SasDefinitionAttributes, sasType?: string,
            tags?: {[propertyName: string]: string}, templateUri?: string,
            validityPeriod?: string }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
  - name: >-
      updateSasDefinition(string, string, string, { customHeaders?:
      {[headerName: string]: string}, sasDefinitionAttributes?:
      SasDefinitionAttributes, sasType?: string, tags?: {[propertyName: string]:
      string}, templateUri?: string, validityPeriod?: string },
      ServiceCallback<SasDefinitionBundle>)
    uid: azure-keyvault.KeyVaultClient.updateSasDefinition_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options: { customHeaders?:
        {[headerName: string]: string}, sasDefinitionAttributes?:
        SasDefinitionAttributes, sasType?: string, tags?: {[propertyName:
        string]: string}, templateUri?: string, validityPeriod?: string },
        callback: ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: sasDefinitionName
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string},
            sasDefinitionAttributes?: SasDefinitionAttributes, sasType?: string,
            tags?: {[propertyName: string]: string}, templateUri?: string,
            validityPeriod?: string }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;
          description: ''
  - name: >-
      updateSasDefinitionWithHttpOperationResponse(string, string, string, {
      customHeaders?: {[headerName: string]: string}, sasDefinitionAttributes?:
      SasDefinitionAttributes, sasType?: string, tags?: {[propertyName: string]:
      string}, templateUri?: string, validityPeriod?: string })
    uid: azure-keyvault.KeyVaultClient.updateSasDefinitionWithHttpOperationResponse
    package: azure-keyvault
    summary: |-
      Updates the specified attributes associated with the given SAS definition.
      This operation requires the storage/setsas permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSasDefinitionWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, sasDefinitionName: string, options?:
        { customHeaders?: {[headerName: string]: string},
        sasDefinitionAttributes?: SasDefinitionAttributes, sasType?: string,
        tags?: {[propertyName: string]: string}, templateUri?: string,
        validityPeriod?: string }):
        Promise<HttpOperationResponse<SasDefinitionBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: sasDefinitionName
          type: string
          description: The name of the SAS definition.
        - id: options
          type: >-
            { customHeaders?: {[headerName: string]: string},
            sasDefinitionAttributes?: SasDefinitionAttributes, sasType?: string,
            tags?: {[propertyName: string]: string}, templateUri?: string,
            validityPeriod?: string }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SasDefinitionBundle" />&gt;&gt;
  - name: updateSecret(string, string, string, ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.updateSecret_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: secretVersion
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: >-
      updateSecret(string, string, string, { contentType?: string,
      customHeaders?: {[headerName: string]: string}, secretAttributes?:
      SecretAttributes, tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.updateSecret
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, options?: { contentType?: string, customHeaders?:
        {[headerName: string]: string}, secretAttributes?: SecretAttributes,
        tags?: {[propertyName: string]: string} }): Promise<SecretBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: secretVersion
          type: string
          description: The version of the secret.
        - id: options
          type: >-
            { contentType?: string, customHeaders?: {[headerName: string]:
            string}, secretAttributes?: SecretAttributes, tags?: {[propertyName:
            string]: string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.SecretBundle"
          />&gt;
  - name: >-
      updateSecret(string, string, string, { contentType?: string,
      customHeaders?: {[headerName: string]: string}, secretAttributes?:
      SecretAttributes, tags?: {[propertyName: string]: string} },
      ServiceCallback<SecretBundle>)
    uid: azure-keyvault.KeyVaultClient.updateSecret_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, options: { contentType?: string, customHeaders?:
        {[headerName: string]: string}, secretAttributes?: SecretAttributes,
        tags?: {[propertyName: string]: string} }, callback:
        ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: secretName
          type: string
          description: ''
        - id: secretVersion
          type: string
          description: ''
        - id: options
          type: >-
            { contentType?: string, customHeaders?: {[headerName: string]:
            string}, secretAttributes?: SecretAttributes, tags?: {[propertyName:
            string]: string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;
          description: ''
  - name: >-
      updateSecretWithHttpOperationResponse(string, string, string, {
      contentType?: string, customHeaders?: {[headerName: string]: string},
      secretAttributes?: SecretAttributes, tags?: {[propertyName: string]:
      string} })
    uid: azure-keyvault.KeyVaultClient.updateSecretWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSecretWithHttpOperationResponse(vaultBaseUrl: string,
        secretName: string, secretVersion: string, options?: { contentType?:
        string, customHeaders?: {[headerName: string]: string},
        secretAttributes?: SecretAttributes, tags?: {[propertyName: string]:
        string} }): Promise<HttpOperationResponse<SecretBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: secretName
          type: string
          description: The name of the secret.
        - id: secretVersion
          type: string
          description: The version of the secret.
        - id: options
          type: >-
            { contentType?: string, customHeaders?: {[headerName: string]:
            string}, secretAttributes?: SecretAttributes, tags?: {[propertyName:
            string]: string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.SecretBundle" />&gt;&gt;
  - name: updateStorageAccount(string, string, ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.updateStorageAccount_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      updateStorageAccount(string, string, { activeKeyName?: string,
      autoRegenerateKey?: boolean, customHeaders?: {[headerName: string]:
      string}, regenerationPeriod?: string, storageAccountAttributes?:
      StorageAccountAttributes, tags?: {[propertyName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.updateStorageAccount
    package: azure-keyvault
    summary: >-
      Updates the specified attributes associated with the given storage
      account.

      This operation requires the storage/set/update permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options?: { activeKeyName?: string, autoRegenerateKey?: boolean,
        customHeaders?: {[headerName: string]: string}, regenerationPeriod?:
        string, storageAccountAttributes?: StorageAccountAttributes, tags?:
        {[propertyName: string]: string} }): Promise<StorageBundle>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: >-
            { activeKeyName?: string, autoRegenerateKey?: boolean,
            customHeaders?: {[headerName: string]: string}, regenerationPeriod?:
            string, storageAccountAttributes?: StorageAccountAttributes, tags?:
            {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.StorageBundle"
          />&gt;
  - name: >-
      updateStorageAccount(string, string, { activeKeyName?: string,
      autoRegenerateKey?: boolean, customHeaders?: {[headerName: string]:
      string}, regenerationPeriod?: string, storageAccountAttributes?:
      StorageAccountAttributes, tags?: {[propertyName: string]: string} },
      ServiceCallback<StorageBundle>)
    uid: azure-keyvault.KeyVaultClient.updateStorageAccount_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options: { activeKeyName?: string, autoRegenerateKey?: boolean,
        customHeaders?: {[headerName: string]: string}, regenerationPeriod?:
        string, storageAccountAttributes?: StorageAccountAttributes, tags?:
        {[propertyName: string]: string} }, callback:
        ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: storageAccountName
          type: string
          description: ''
        - id: options
          type: >-
            { activeKeyName?: string, autoRegenerateKey?: boolean,
            customHeaders?: {[headerName: string]: string}, regenerationPeriod?:
            string, storageAccountAttributes?: StorageAccountAttributes, tags?:
            {[propertyName: string]: string} }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;
          description: ''
  - name: >-
      updateStorageAccountWithHttpOperationResponse(string, string, {
      activeKeyName?: string, autoRegenerateKey?: boolean, customHeaders?:
      {[headerName: string]: string}, regenerationPeriod?: string,
      storageAccountAttributes?: StorageAccountAttributes, tags?:
      {[propertyName: string]: string} })
    uid: >-
      azure-keyvault.KeyVaultClient.updateStorageAccountWithHttpOperationResponse
    package: azure-keyvault
    summary: >-
      Updates the specified attributes associated with the given storage
      account.

      This operation requires the storage/set/update permission.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateStorageAccountWithHttpOperationResponse(vaultBaseUrl:
        string, storageAccountName: string, options?: { activeKeyName?: string,
        autoRegenerateKey?: boolean, customHeaders?: {[headerName: string]:
        string}, regenerationPeriod?: string, storageAccountAttributes?:
        StorageAccountAttributes, tags?: {[propertyName: string]: string} }):
        Promise<HttpOperationResponse<StorageBundle>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: storageAccountName
          type: string
          description: The name of the storage account.
        - id: options
          type: >-
            { activeKeyName?: string, autoRegenerateKey?: boolean,
            customHeaders?: {[headerName: string]: string}, regenerationPeriod?:
            string, storageAccountAttributes?: StorageAccountAttributes, tags?:
            {[propertyName: string]: string} }
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.StorageBundle" />&gt;&gt;
  - name: >-
      verify(string, string, string, string, Buffer, Buffer,
      ServiceCallback<KeyVerifyResult>)
    uid: azure-keyvault.KeyVaultClient.verify_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function verify(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, digest: Buffer, signature: Buffer, callback:
        ServiceCallback<KeyVerifyResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: digest
          type: Buffer
          description: ''
        - id: signature
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyVerifyResult" />&gt;
          description: ''
  - name: >-
      verify(string, string, string, string, Buffer, Buffer, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.verify
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function verify(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, digest: Buffer, signature: Buffer, options?:
        { customHeaders?: {[headerName: string]: string} }):
        Promise<KeyVerifyResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: >-
            The signing/verification algorithm. For more

            information on possible algorithm types, see
            JsonWebKeySignatureAlgorithm.

            Possible values include: 'PS256', 'PS384', 'PS512', 'RS256',
            'RS384',

            'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
        - id: digest
          type: Buffer
          description: The digest used for signing.
        - id: signature
          type: Buffer
          description: The signature to be verified.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref uid="azure-keyvault.KeyVaultModels.KeyVerifyResult"
          />&gt;
  - name: >-
      verify(string, string, string, string, Buffer, Buffer, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<KeyVerifyResult>)
    uid: azure-keyvault.KeyVaultClient.verify_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function verify(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, digest: Buffer, signature: Buffer, options: {
        customHeaders?: {[headerName: string]: string} }, callback:
        ServiceCallback<KeyVerifyResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: digest
          type: Buffer
          description: ''
        - id: signature
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyVerifyResult" />&gt;
          description: ''
  - name: >-
      verifyWithHttpOperationResponse(string, string, string, string, Buffer,
      Buffer, { customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.verifyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function verifyWithHttpOperationResponse(vaultBaseUrl: string, keyName:
        string, keyVersion: string, algorithm: string, digest: Buffer,
        signature: Buffer, options?: { customHeaders?: {[headerName: string]:
        string} }): Promise<HttpOperationResponse<KeyVerifyResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: >-
            The signing/verification algorithm. For more

            information on possible algorithm types, see
            JsonWebKeySignatureAlgorithm.

            Possible values include: 'PS256', 'PS384', 'PS512', 'RS256',
            'RS384',

            'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
        - id: digest
          type: Buffer
          description: The digest used for signing.
        - id: signature
          type: Buffer
          description: The signature to be verified.
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyVerifyResult" />&gt;&gt;
  - name: >-
      wrapKey(string, string, string, string, Buffer,
      ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.wrapKey_1
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function wrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      wrapKey(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.wrapKey
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function wrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, options?: { customHeaders?:
        {[headerName: string]: string} }): Promise<KeyOperationResult>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: |-
            algorithm identifier. Possible values include:
            'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.
        type: >-
          Promise&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
  - name: >-
      wrapKey(string, string, string, string, Buffer, { customHeaders?:
      {[headerName: string]: string} }, ServiceCallback<KeyOperationResult>)
    uid: azure-keyvault.KeyVaultClient.wrapKey_2
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function wrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: string, value: Buffer, options: { customHeaders?:
        {[headerName: string]: string} }, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: keyVersion
          type: string
          description: ''
        - id: algorithm
          type: string
          description: ''
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;
          description: ''
  - name: >-
      wrapKeyWithHttpOperationResponse(string, string, string, string, Buffer, {
      customHeaders?: {[headerName: string]: string} })
    uid: azure-keyvault.KeyVaultClient.wrapKeyWithHttpOperationResponse
    package: azure-keyvault
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function wrapKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName:
        string, keyVersion: string, algorithm: string, value: Buffer, options?:
        { customHeaders?: {[headerName: string]: string} }):
        Promise<HttpOperationResponse<KeyOperationResult>>
      parameters:
        - id: vaultBaseUrl
          type: string
          description: |-
            The vault name, for example
            https://myvault.vault.azure.net.
        - id: keyName
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: algorithm
          type: string
          description: |-
            algorithm identifier. Possible values include:
            'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
        - id: value
          type: Buffer
          description: ''
        - id: options
          type: '{ customHeaders?: {[headerName: string]: string} }'
          description: Optional Parameters.
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-keyvault.KeyVaultModels.KeyOperationResult" />&gt;&gt;
extends: AzureServiceClient
