### YamlMime:TSType
name: Context
uid: '@azure/functions.Context'
package: '@azure/functions'
summary: >-
  The context object can be used for writing logs, reading data from bindings,
  setting outputs and using

  the context.done callback when your exported function is synchronous. A
  context object is passed

  to your function from the Azure Functions runtime on function invocation.
fullName: Context
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: bindingData
    uid: '@azure/functions.Context.bindingData'
    package: '@azure/functions'
    summary: Trigger metadata and function invocation data.
    fullName: bindingData
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'bindingData: ContextBindingData'
      return:
        description: ''
        type: <xref uid="@azure/functions.ContextBindingData" />
  - name: bindingDefinitions
    uid: '@azure/functions.Context.bindingDefinitions'
    package: '@azure/functions'
    summary: Bindings your function uses, as defined in function.json.
    fullName: bindingDefinitions
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'bindingDefinitions: BindingDefinition[]'
      return:
        description: ''
        type: <xref uid="@azure/functions.BindingDefinition" />[]
  - name: bindings
    uid: '@azure/functions.Context.bindings'
    package: '@azure/functions'
    summary: >-
      Input and trigger binding data, as defined in function.json. Properties on
      this object are dynamically

      generated and named based off of the "name" property in function.json.
    fullName: bindings
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'bindings: ContextBindings'
      return:
        description: ''
        type: <xref uid="@azure/functions.ContextBindings" />
  - name: executionContext
    uid: '@azure/functions.Context.executionContext'
    package: '@azure/functions'
    summary: Function execution metadata.
    fullName: executionContext
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'executionContext: ExecutionContext'
      return:
        description: ''
        type: <xref uid="@azure/functions.ExecutionContext" />
  - name: invocationId
    uid: '@azure/functions.Context.invocationId'
    package: '@azure/functions'
    summary: A unique GUID per function invocation.
    fullName: invocationId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'invocationId: string'
      return:
        description: ''
        type: string
  - name: log
    uid: '@azure/functions.Context.log'
    package: '@azure/functions'
    summary: >-
      Allows you to write streaming function logs. Calling directly allows you
      to write streaming function logs

      at the default trace level.
    fullName: log
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'log: Logger'
      return:
        description: ''
        type: <xref uid="@azure/functions.Logger" />
  - name: req
    uid: '@azure/functions.Context.req'
    package: '@azure/functions'
    summary: HTTP request object. Provided to your function when using HTTP Bindings.
    fullName: req
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'req?: HttpRequest'
      return:
        description: ''
        type: <xref uid="@azure/functions.HttpRequest" />
  - name: res
    uid: '@azure/functions.Context.res'
    package: '@azure/functions'
    summary: HTTP response object. Provided to your function when using HTTP Bindings.
    fullName: res
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'res?: {[key: string]: any}'
      return:
        description: ''
        type: '{[key: string]: any}'
  - name: suppressAsyncDoneError
    uid: '@azure/functions.Context.suppressAsyncDoneError'
    package: '@azure/functions'
    summary: >-
      If this flag is set to true in your function, the error for calling
      `context.done()` within

      an async function will not be logged. More info:
      https://go.microsoft.com/fwlink/?linkid=2097909
    fullName: suppressAsyncDoneError
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'suppressAsyncDoneError?: boolean'
      return:
        description: ''
        type: boolean
  - name: traceContext
    uid: '@azure/functions.Context.traceContext'
    package: '@azure/functions'
    summary: TraceContext information to enable distributed tracing scenarios.
    fullName: traceContext
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'traceContext: TraceContext'
      return:
        description: ''
        type: <xref uid="@azure/functions.TraceContext" />
methods:
  - name: done(null | string | Error, any)
    uid: '@azure/functions.Context.done'
    package: '@azure/functions'
    summary: >-
      A callback function that signals to the runtime that your code has
      completed. If your function is synchronous,

      you must call context.done at the end of execution. If your function is
      asynchronous, you should not use this

      callback.
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: >-
      Use of sync functions with `context.done()` is not recommended. Use
      async/await and pass the response as the return value instead.

      See the docs here for more information:
      https://aka.ms/functions-js-async-await
    syntax:
      content: 'function done(err?: null | string | Error, result?: any)'
      parameters:
        - id: err
          type: null | string | Error
          description: >-
            A user-defined error to pass back to the runtime. If present, your
            function execution will fail.
        - id: result
          type: any
          description: >-
            An object containing output binding data. `result` will be passed to
            JSON.stringify unless it is
             a string, Buffer, ArrayBufferView, or number.
