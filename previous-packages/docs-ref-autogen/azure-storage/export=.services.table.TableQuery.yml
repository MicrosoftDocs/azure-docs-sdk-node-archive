### YamlMime:TSType
name: TableQuery
uid: azure-storage.export=.services.table.TableQuery
package: azure-storage
summary: ''
fullName: TableQuery
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: and(string, any[])
    uid: azure-storage.export=.services.table.TableQuery.and
    package: azure-storage
    summary: |+
      Specifies an AND where condition.

      **Example**

      ```ts
      var tableQuery = new TableQuery()
                           .where('Name == ? or Name <= ?', 'Person1', 'Person2');
                           .and('Age >= ?', 18);
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function and(condition: string, args: any[]): TableQuery'
      parameters:
        - id: condition
          type: string
          description: The condition string.
        - id: args
          type: any[]
          description: ''
      return:
        description: A table query object with the and clause.
        type: TableQuery
  - name: or(string, any[])
    uid: azure-storage.export=.services.table.TableQuery.or
    package: azure-storage
    summary: |+
      Specifies an OR where condition.

      **Example**

      ```ts
      var tableQuery = new TableQuery()
                           .where('Name == ? or Name <= ?', 'Person1', 'Person2');
                           .or('Age >= ?', 18);
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function or(condition: string, args: any[]): TableQuery'
      parameters:
        - id: condition
          type: string
          description: The condition.
        - id: args
          type: any[]
          description: ''
      return:
        description: A table query object with the or clause.
        type: TableQuery
  - name: select(string[])
    uid: azure-storage.export=.services.table.TableQuery.select
    package: azure-storage
    summary: >+
      Specifies the select clause. If no arguments are given, all fields will be
      selected.


      **Example**


      ```ts

      var tableQuery = new TableQuery().select('field1', 'field2');

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function select(args: string[]): TableQuery'
      parameters:
        - id: args
          type: string[]
          description: ''
      return:
        description: A table query object with the select clause.
        type: TableQuery
  - name: select(string[])
    uid: azure-storage.export=.services.table.TableQuery.select_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function select(args: string[]): TableQuery'
      parameters:
        - id: args
          type: string[]
          description: ''
      return:
        description: ''
        type: TableQuery
  - name: top(number)
    uid: azure-storage.export=.services.table.TableQuery.top
    package: azure-storage
    summary: >+
      Specifies the top clause.


      **Example**


      ```ts

      var tableQuery = new TableQuery().top(10);


      // tasktable should already exist and have entities

      tableService.queryEntities('tasktable', tableQuery, null /*currentToken*/,
      function(error, result) {
        if(!error) {
          var entities = result.entities; // there will be 10 or less entities
          // do stuff with the returned entities if there are any
          // if result.continuationToken exists, to get the next 10 (or less) entities
          // call queryEntities as above, but with the returned token instead of null
        }
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function top(top: number): TableQuery'
      parameters:
        - id: top
          type: number
          description: The number of items to fetch.
      return:
        description: A table query object with the top clause.
        type: TableQuery
  - name: toQueryObject()
    uid: azure-storage.export=.services.table.TableQuery.toQueryObject
    package: azure-storage
    summary: Returns the query string object for the query.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function toQueryObject(): Object'
      return:
        description: JSON object representing the query string arguments for the query.
        type: Object
  - name: where(string, any[])
    uid: azure-storage.export=.services.table.TableQuery.where
    package: azure-storage
    summary: >+
      Specifies the where clause.


      Valid type specifier strings include: ?string?, ?bool?, ?int32?, ?double?,
      ?date?, ?guid?, ?int64?, ?binary?

      A type must be specified for guid, int64, and binaries or the filter
      produced will be incorrect.


      **Example**


      ```ts

      var tableQuery = new TableQuery().where(TableQuery.guidFilter('GuidField',
      QueryComparisons.EQUAL, guidVal));

      OR

      var tableQuery = new TableQuery().where('Name == ? or Name <= ?', name1,
      name2);

      OR

      var tableQuery = new TableQuery().where('Name == ?string? && Value ==
      ?int64?, name1, int64Val);


      // tasktable should already exist and have entities

      tableService.queryEntities('tasktable', tableQuery, null /*currentToken*/,
      function(error, result, response) {
        if(!error) {
          var entities = result.entities;
          // do stuff with the returned entities if there are any
        }
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function where(condition: string, args: any[]): TableQuery'
      parameters:
        - id: condition
          type: string
          description: The condition string.
        - id: args
          type: any[]
          description: ''
      return:
        description: A table query object with the where clause.
        type: TableQuery
