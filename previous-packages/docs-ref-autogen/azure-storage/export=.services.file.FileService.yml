### YamlMime:TSType
name: FileService
uid: azure-storage.export=.services.file.FileService
package: azure-storage
summary: ''
fullName: FileService
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: defaultEnableReuseSocket
    uid: azure-storage.export=.services.file.FileService.defaultEnableReuseSocket
    package: azure-storage
    summary: ''
    fullName: defaultEnableReuseSocket
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultEnableReuseSocket: boolean'
      return:
        description: ''
        type: boolean
  - name: parallelOperationThreadCount
    uid: >-
      azure-storage.export=.services.file.FileService.parallelOperationThreadCount
    package: azure-storage
    summary: ''
    fullName: parallelOperationThreadCount
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'parallelOperationThreadCount: number'
      return:
        description: ''
        type: number
  - name: singleFileThresholdInBytes
    uid: azure-storage.export=.services.file.FileService.singleFileThresholdInBytes
    package: azure-storage
    summary: ''
    fullName: singleFileThresholdInBytes
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'singleFileThresholdInBytes: number'
      return:
        description: ''
        type: number
inheritedProperties:
  - name: defaultClientRequestTimeoutInMs
    uid: >-
      azure-storage.export=.services.file.FileService.defaultClientRequestTimeoutInMs
    package: azure-storage
    summary: >-
      The default timeout of client requests, in milliseconds, to use for the
      request.
    fullName: defaultClientRequestTimeoutInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultClientRequestTimeoutInMs: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultClientRequestTimeoutInMs](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultClientRequestTimeoutInMs)
  - name: defaultLocationMode
    uid: azure-storage.export=.services.file.FileService.defaultLocationMode
    package: azure-storage
    summary: The default location mode for requests made via the service.
    fullName: defaultLocationMode
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultLocationMode: LocationMode'
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.util.storageutilities.LocationMode" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultLocationMode](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultLocationMode)
  - name: defaultMaximumExecutionTimeInMs
    uid: >-
      azure-storage.export=.services.file.FileService.defaultMaximumExecutionTimeInMs
    package: azure-storage
    summary: >-
      The default maximum execution time across all potential retries, for
      requests made via the service.
    fullName: defaultMaximumExecutionTimeInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultMaximumExecutionTimeInMs: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultMaximumExecutionTimeInMs](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultMaximumExecutionTimeInMs)
  - name: defaultTimeoutIntervalInMs
    uid: azure-storage.export=.services.file.FileService.defaultTimeoutIntervalInMs
    package: azure-storage
    summary: >-
      The default timeout interval, in milliseconds, to use for request made via
      the service.
    fullName: defaultTimeoutIntervalInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultTimeoutIntervalInMs: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultTimeoutIntervalInMs](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultTimeoutIntervalInMs)
  - name: enableGlobalHttpAgent
    uid: azure-storage.export=.services.file.FileService.enableGlobalHttpAgent
    package: azure-storage
    summary: >-
      Determines whether global HTTP(s) agent is enabled; true to use Global
      HTTP(s) agent; otherwise, false to use

      http(s).Agent({keepAlive:true}).
    fullName: enableGlobalHttpAgent
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'enableGlobalHttpAgent: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.enableGlobalHttpAgent](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.enableGlobalHttpAgent)
  - name: logger
    uid: azure-storage.export=.services.file.FileService.logger
    package: azure-storage
    summary: The logging settings object.
    fullName: logger
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'logger: Logger'
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.diagnostics.logger.Logger" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.logger](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.logger)
  - name: proxy
    uid: azure-storage.export=.services.file.FileService.proxy
    package: azure-storage
    summary: The proxy object specified by caller.
    fullName: proxy
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'proxy: Proxy'
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.Proxy" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.proxy](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.proxy)
  - name: useNagleAlgorithm
    uid: azure-storage.export=.services.file.FileService.useNagleAlgorithm
    package: azure-storage
    summary: >-
      Determines whether the Nagle algorithm is used for requests made via the
      Queue service; true to use the

      Nagle algorithm; otherwise, false. The default value is false.
    fullName: useNagleAlgorithm
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'useNagleAlgorithm: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.useNagleAlgorithm](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.useNagleAlgorithm)
inheritedMethods:
  - name: addListener(string, Function)
    uid: azure-storage.export=.services.file.FileService.addListener
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function addListener(event: string, listener: Function): FileService'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: FileService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.addListener](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.addListener)
  - name: emit(string, any[])
    uid: azure-storage.export=.services.file.FileService.emit
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit(event: string, args: any[]): boolean'
      parameters:
        - id: event
          type: string
          description: ''
        - id: args
          type: any[]
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.emit](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.emit)
  - name: listeners(string)
    uid: azure-storage.export=.services.file.FileService.listeners
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners(event: string): Function[]'
      parameters:
        - id: event
          type: string
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.listeners](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.listeners)
  - name: on(string, Function)
    uid: azure-storage.export=.services.file.FileService.on
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function on(event: string, listener: Function): FileService'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: FileService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.on](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.on)
  - name: once(string, Function)
    uid: azure-storage.export=.services.file.FileService.once
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function once(event: string, listener: Function): FileService'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: FileService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.once](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.once)
  - name: removeAllListeners(string)
    uid: azure-storage.export=.services.file.FileService.removeAllListeners
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string): FileService'
      parameters:
        - id: event
          type: string
          description: ''
      return:
        description: ''
        type: FileService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.removeAllListeners](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.removeAllListeners)
  - name: removeListener(string, Function)
    uid: azure-storage.export=.services.file.FileService.removeListener
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeListener(event: string, listener: Function): FileService'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: FileService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.removeListener](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.removeListener)
  - name: setMaxListeners(number)
    uid: azure-storage.export=.services.file.FileService.setMaxListeners
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type: number
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.setMaxListeners](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.setMaxListeners)
  - name: setProxy(Proxy)
    uid: azure-storage.export=.services.file.FileService.setProxy
    package: azure-storage
    summary: Sets proxy object specified by caller.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setProxy(proxy: Proxy)'
      parameters:
        - id: proxy
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.services.storageserviceclient.Proxy" />
          description: |-
            proxy to use for tunneling
                                                   {
                                                    host: hostname
                                                    port: port number
                                                    proxyAuth: 'user:password' for basic auth
                                                    headers: {...} headers for proxy server
                                                    key: key for proxy server
                                                    ca: ca for proxy server
                                                    cert: cert for proxy server
                                                   }
                                                   if null or undefined, clears proxy
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.setProxy](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.setProxy)
methods:
  - name: abortCopyFile(string, string, string, string, ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.abortCopyFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function abortCopyFile(share: string, directory: string, file: string,
        copyId: string, callback: ErrorOrResponse)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: copyId
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: ''
  - name: >-
      abortCopyFile(string, string, string, string, RequestOptions,
      ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.abortCopyFile
    package: azure-storage
    summary: Abort a file copy operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function abortCopyFile(share: string, directory: string, file: string,
        copyId: string, options?: RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: share
          type: string
          description: The destination share name.
        - id: directory
          type: string
          description: The destination directory name.
        - id: file
          type: string
          description: The destination file name.
        - id: copyId
          type: string
          description: The copy operation identifier.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information if an error occurs.
                                                                                  `response` will contain information related to this operation.
  - name: >-
      clearRange(string, string, string, number, number,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.clearRange_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function clearRange(share: string, directory: string, file: string,
        rangeStart: number, rangeEnd: number, callback:
        ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: rangeStart
          type: number
          description: ''
        - id: rangeEnd
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      clearRange(string, string, string, number, number, RequestOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.clearRange
    package: azure-storage
    summary: >-
      Clears a range. Clears all of the ranges by default, or only the ranges
      over a specific range of bytes if rangeStart and rangeEnd are specified.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function clearRange(share: string, directory: string, file: string,
        rangeStart: number, rangeEnd: number, options?: RequestOptions,
        callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: rangeStart
          type: number
          description: The range start.
        - id: rangeEnd
          type: number
          description: The range end.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the directory information.
                                                                                   `response` will contain information related to this operation.
  - name: >-
      createDirectory(string, string, CreateDirectoryRequestOptions,
      ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.createDirectory
    package: azure-storage
    summary: |-
      Creates a new directory under the specified account.
      If a directory with the same name already exists, the operation fails.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDirectory(share: string, directory: string, options?:
        CreateDirectoryRequestOptions, callback: ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateDirectoryRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            the directory information.
                                                                            `response` will contain information related to this operation.
  - name: createDirectory(string, string, ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.createDirectory_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDirectory(share: string, directory: string, callback:
        ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: ''
  - name: >-
      createDirectoryIfNotExists(string, string, CreateDirectoryRequestOptions,
      ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.createDirectoryIfNotExists
    package: azure-storage
    summary: >+
      Creates a new directory under the specified account if the directory does
      not exists.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var FileService = azure.createFileService();

      FileService.createDirectoryIfNotExists('taskshare', taskdirectory',
      function(error) {
        if(!error) {
          // Directory created or already existed
        }
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDirectoryIfNotExists(share: string, directory: string,
        options?: CreateDirectoryRequestOptions, callback:
        ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateDirectoryRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: |-
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will
                                                                                  be true if the directory was created, or false if the directory
                                                                                  already exists.
                                                                                  `response` will contain information related to this operation.
  - name: createDirectoryIfNotExists(string, string, ErrorOrResult<DirectoryResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.createDirectoryIfNotExists_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDirectoryIfNotExists(share: string, directory: string,
        callback: ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: ''
  - name: >-
      createFile(string, string, string, number, CreateFileRequestOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createFile
    package: azure-storage
    summary: Creates a file of the specified length.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFile(share: string, directory: string, file: string,
        length: number, options?: CreateFileRequestOptions, callback:
        ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: length
          type: number
          description: The length of the file in bytes.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      the directory information.
                                                                                      `response` will contain information related to this operation.
  - name: createFile(string, string, string, number, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFile(share: string, directory: string, file: string,
        length: number, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: length
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      createFileFromBrowserFile(string, string, string, Object,
      CreateFileRequestOptions, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createFileFromBrowserFile
    package: azure-storage
    summary: >-
      Uploads a file to storage from an HTML File object. If the file already
      exists on the service, it will be overwritten.

      (Only available in the JavaScript Client Library for Browsers)
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFileFromBrowserFile(share: string, directory: string,
        file: string, browserFile: Object, options?: CreateFileRequestOptions,
        callback: ErrorOrResult<FileResult>): SpeedSummary
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: browserFile
          type: Object
          description: The File object to be uploaded created by HTML File API.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information if an error occurs; 
                                                                                      otherwise `[result](xref:azure-storage.export=.services.file.FileService.FileResult)` will contain the file information.
                                                                                      `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.streams.speedsummary.SpeedSummary" />
  - name: >-
      createFileFromBrowserFile(string, string, string, Object,
      ErrorOrResult<FileResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.createFileFromBrowserFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFileFromBrowserFile(share: string, directory: string,
        file: string, browserFile: Object, callback: ErrorOrResult<FileResult>):
        SpeedSummary
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: browserFile
          type: Object
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.streams.speedsummary.SpeedSummary" />
  - name: >-
      createFileFromLocalFile(string, string, string, string,
      CreateFileRequestOptions, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createFileFromLocalFile
    package: azure-storage
    summary: Uploads a file to storage from a local file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFileFromLocalFile(share: string, directory: string, file:
        string, localFileName: string, options?: CreateFileRequestOptions,
        callback: ErrorOrResult<FileResult>): SpeedSummary
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: localFileName
          type: string
          description: ''
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.streams.speedsummary.SpeedSummary" />
  - name: >-
      createFileFromLocalFile(string, string, string, string,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createFileFromLocalFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFileFromLocalFile(share: string, directory: string, file:
        string, localFileName: string, callback: ErrorOrResult<FileResult>):
        SpeedSummary
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: localFileName
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.streams.speedsummary.SpeedSummary" />
  - name: >-
      createFileFromStream(string, string, string, Readable, number,
      CreateFileRequestOptions, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createFileFromStream
    package: azure-storage
    summary: Uploads a file from a stream.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFileFromStream(share: string, directory: string, file:
        string, stream: Readable, streamLength: number, options?:
        CreateFileRequestOptions, callback: ErrorOrResult<FileResult>):
        SpeedSummary
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: stream
          type: Readable
          description: ''
        - id: streamLength
          type: number
          description: The length of the stream to upload.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.streams.speedsummary.SpeedSummary" />
  - name: >-
      createFileFromStream(string, string, string, Readable, number,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createFileFromStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFileFromStream(share: string, directory: string, file:
        string, stream: Readable, streamLength: number, callback:
        ErrorOrResult<FileResult>): SpeedSummary
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: stream
          type: Readable
          description: ''
        - id: streamLength
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.streams.speedsummary.SpeedSummary" />
  - name: >-
      createFileFromText(string, string, string, string | Buffer,
      CreateFileRequestOptions, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createFileFromText
    package: azure-storage
    summary: Uploads a file from a text string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFileFromText(share: string, directory: string, file:
        string, text: string | Buffer, options?: CreateFileRequestOptions,
        callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: text
          type: string | Buffer
          description: The file text, as a string or in a Buffer.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                      if an error occurs; `result` will contain the file information.
                                                                                      `response` will contain information related to this operation.
  - name: >-
      createFileFromText(string, string, string, string | Buffer,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createFileFromText_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFileFromText(share: string, directory: string, file:
        string, text: string | Buffer, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: text
          type: string | Buffer
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      createRangesFromStream(string, string, string, Readable, number, number,
      CreateRangeRequestOptions, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createRangesFromStream
    package: azure-storage
    summary: Updates a range from a stream.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createRangesFromStream(share: string, directory: string, file:
        string, readStream: Readable, rangeStart: number, rangeEnd: number,
        options?: CreateRangeRequestOptions, callback:
        ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: readStream
          type: Readable
          description: The Node.js Readable stream.
        - id: rangeStart
          type: number
          description: The range start.
        - id: rangeEnd
          type: number
          description: The range end.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateRangeRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the file information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      createRangesFromStream(string, string, string, Readable, number, number,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createRangesFromStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createRangesFromStream(share: string, directory: string, file:
        string, readStream: Readable, rangeStart: number, rangeEnd: number,
        callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: readStream
          type: Readable
          description: ''
        - id: rangeStart
          type: number
          description: ''
        - id: rangeEnd
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: createReadStream(string, string, string, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createReadStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createReadStream(share: string, directory: string, file:
        string, callback: ErrorOrResult<FileResult>): Readable
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
      return:
        description: ''
        type: Readable
  - name: >-
      createReadStream(string, string, string, GetFileRequestOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createReadStream
    package: azure-storage
    summary: >+
      Provides a stream to read from a file.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var fileService = azure.createFileService();

      var writable = fs.createWriteStream(destinationFileNameTarget);

      fileService.createReadStream(shareName, directoryName,
      fileName).pipe(writable);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createReadStream(share: string, directory: string, file:
        string, options?: GetFileRequestOptions, callback:
        ErrorOrResult<FileResult>): Readable
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.GetFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the file information.
                                                                                    `response` will contain information related to this operation.
      return:
        description: A Node.js Readable stream.
        type: Readable
  - name: createShare(string, CreateShareRequestOptions, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.createShare
    package: azure-storage
    summary: |-
      Creates a new share under the specified account.
      If a share with the same name already exists, the operation fails.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createShare(share: string, options?: CreateShareRequestOptions,
        callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateShareRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            the share information.
                                                                            `response` will contain information related to this operation.
  - name: createShare(string, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.createShare_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createShare(share: string, callback:
        ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: ''
  - name: >-
      createShareIfNotExists(string, CreateShareRequestOptions,
      ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.createShareIfNotExists
    package: azure-storage
    summary: >+
      Creates a new share under the specified account if the share does not
      exists.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var FileService = azure.createFileService();

      FileService.createShareIfNotExists('taskshare', function(error) {
        if(!error) {
          // Share created or already existed
        }
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createShareIfNotExists(share: string, options?:
        CreateShareRequestOptions, callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateShareRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: |-
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will
                                                                                  be true if the share was created, or false if the share
                                                                                  already exists.
                                                                                  `response` will contain information related to this operation.
  - name: createShareIfNotExists(string, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.createShareIfNotExists_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createShareIfNotExists(share: string, callback:
        ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: ''
  - name: createShareSnapshot(string, ErrorOrResult<string>)
    uid: azure-storage.export=.services.file.FileService.createShareSnapshot_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createShareSnapshot(share: string, callback:
        ErrorOrResult<string>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;string&gt;
          description: ''
  - name: createShareSnapshot(string, RequestOptions, ErrorOrResult<string>)
    uid: azure-storage.export=.services.file.FileService.createShareSnapshot
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createShareSnapshot(share: string, options: RequestOptions,
        callback: ErrorOrResult<string>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;string&gt;
          description: ''
  - name: >-
      createWriteStreamToExistingFile(string, string, string,
      CreateFileRequestOptions, ErrorOrResult<FileResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.createWriteStreamToExistingFile
    package: azure-storage
    summary: >+
      Provides a stream to write to a file. Assumes that the file exists.

      If it does not, please create the file using createFile before calling
      this method or use createWriteStreamNewFile.

      Please note the `Stream` returned by this API should be used with piping.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var FileService = azure.createFileService();

      FileService.createFile(shareName, directoryName, fileName, 1024, function
      (err) {
        // Pipe file to a file
        var stream = fs.createReadStream(fileNameTarget).pipe(FileService.createWriteStreamToExistingFile(shareName, directoryName, fileName));
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToExistingFile(share: string, directory:
        string, file: string, options?: CreateFileRequestOptions, callback:
        ErrorOrResult<FileResult>): Writable
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: The callback function.
      return:
        description: A Node.js Writable stream.
        type: Writable
  - name: >-
      createWriteStreamToExistingFile(string, string, string,
      ErrorOrResult<FileResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.createWriteStreamToExistingFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToExistingFile(share: string, directory:
        string, file: string, callback: ErrorOrResult<FileResult>): Writable
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
      return:
        description: ''
        type: Writable
  - name: >-
      createWriteStreamToNewFile(string, string, string, number,
      CreateFileRequestOptions, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.createWriteStreamToNewFile
    package: azure-storage
    summary: >+
      Provides a stream to write to a file. Creates the file before writing
      data.

      Please note the `Stream` returned by this API should be used with piping.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var FileService = azure.createFileService();

      var stream =
      fs.createReadStream(fileNameTarget).pipe(FileService.createWriteStreamToNewFile(shareName,
      directoryName, fileName));

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToNewFile(share: string, directory: string,
        file: string, length: number, options?: CreateFileRequestOptions,
        callback: ErrorOrResult<FileResult>): Writable
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: length
          type: number
          description: The file length.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CreateFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: The callback function.
      return:
        description: A Node.js Writable stream.
        type: Writable
  - name: >-
      createWriteStreamToNewFile(string, string, string, number,
      ErrorOrResult<FileResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.createWriteStreamToNewFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToNewFile(share: string, directory: string,
        file: string, length: number, callback: ErrorOrResult<FileResult>):
        Writable
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: length
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
      return:
        description: ''
        type: Writable
  - name: deleteDirectory(string, string, ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.deleteDirectory_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDirectory(share: string, directory: string, callback:
        ErrorOrResponse)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: ''
  - name: deleteDirectory(string, string, RequestOptions, ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.deleteDirectory
    package: azure-storage
    summary: >-
      Marks the specified directory for deletion. The directory must be empty
      before it can be deleted.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDirectory(share: string, directory: string, options?:
        RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
  - name: deleteDirectoryIfExists(string, string, ErrorOrResult<boolean>)
    uid: azure-storage.export=.services.file.FileService.deleteDirectoryIfExists_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDirectoryIfExists(share: string, directory: string,
        callback: ErrorOrResult<boolean>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;boolean&gt;
          description: ''
  - name: >-
      deleteDirectoryIfExists(string, string, RequestOptions,
      ErrorOrResult<boolean>)
    uid: azure-storage.export=.services.file.FileService.deleteDirectoryIfExists
    package: azure-storage
    summary: >-
      Marks the specified directory for deletion if it exists. The directory
      must be empty before it can be deleted.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDirectoryIfExists(share: string, directory: string,
        options?: RequestOptions, callback: ErrorOrResult<boolean>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;boolean&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the directory exists and was deleted, or false if the directory
                                                                            did not exist.
                                                                            `response` will contain information related to this operation.
  - name: deleteFile(string, string, string, ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.deleteFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFile(share: string, directory: string, file: string,
        callback: ErrorOrResponse)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: ''
  - name: deleteFile(string, string, string, RequestOptions, ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.deleteFile
    package: azure-storage
    summary: >-
      Marks the specified file for deletion. The file is later deleted during
      garbage collection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFile(share: string, directory: string, file: string,
        options?: RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information
                                                                                    if an error occurs; `response` will contain information related to this operation.
  - name: deleteFileIfExists(string, string, string, ErrorOrResult<boolean>)
    uid: azure-storage.export=.services.file.FileService.deleteFileIfExists_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFileIfExists(share: string, directory: string, file:
        string, callback: ErrorOrResult<boolean>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;boolean&gt;
          description: ''
  - name: >-
      deleteFileIfExists(string, string, string, RequestOptions,
      ErrorOrResult<boolean>)
    uid: azure-storage.export=.services.file.FileService.deleteFileIfExists
    package: azure-storage
    summary: >-
      Marks the specified file for deletion if it exists. The file is later
      deleted during garbage collection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFileIfExists(share: string, directory: string, file:
        string, options?: RequestOptions, callback: ErrorOrResult<boolean>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;boolean&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the file was deleted, or false if the file
                                                                            does not exist.
                                                                            `response` will contain information related to this operation.
  - name: deleteShare(string, DeleteShareOptions, ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.deleteShare
    package: azure-storage
    summary: >-
      Marks the specified share for deletion.

      The share and any files contained within it are later deleted during
      garbage collection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteShare(share: string, options?: DeleteShareOptions,
        callback: ErrorOrResponse)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DeleteShareOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
  - name: deleteShare(string, ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.deleteShare_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function deleteShare(share: string, callback: ErrorOrResponse)'
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: ''
  - name: deleteShareIfExists(string, DeleteShareOptions, ErrorOrResult<boolean>)
    uid: azure-storage.export=.services.file.FileService.deleteShareIfExists
    package: azure-storage
    summary: >-
      Marks the specified share for deletion if it exists.

      The share and any files contained within it are later deleted during
      garbage collection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteShareIfExists(share: string, options?:
        DeleteShareOptions, callback: ErrorOrResult<boolean>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DeleteShareOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;boolean&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the share exists and was deleted, or false if the share
                                                                            did not exist.
                                                                            `response` will contain information related to this operation.
  - name: deleteShareIfExists(string, ErrorOrResult<boolean>)
    uid: azure-storage.export=.services.file.FileService.deleteShareIfExists_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteShareIfExists(share: string, callback:
        ErrorOrResult<boolean>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;boolean&gt;
          description: ''
  - name: doesDirectoryExist(string, string, ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.doesDirectoryExist_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function doesDirectoryExist(share: string, directory: string, callback:
        ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: ''
  - name: >-
      doesDirectoryExist(string, string, FileServiceOptions,
      ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.doesDirectoryExist
    package: azure-storage
    summary: Checks whether or not a directory exists on the service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function doesDirectoryExist(share: string, directory: string, options?:
        FileServiceOptions, callback: ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileServiceOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: |-
            `error` will contain information
                                                                                if an error occurs; otherwise `result` will
                                                                                be true if the directory exists, or false if the directory does not exist.
                                                                                `response` will contain information related to this operation.
  - name: doesFileExist(string, string, string, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.doesFileExist_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function doesFileExist(share: string, directory: string, file: string,
        callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      doesFileExist(string, string, string, FileServiceOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.doesFileExist
    package: azure-storage
    summary: Checks whether or not a file exists on the service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function doesFileExist(share: string, directory: string, file: string,
        options?: FileServiceOptions, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileServiceOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                if an error occurs; otherwise `errorOrResult` will
                                                                                be true if the file exists, or false if the file does not exist.
                                                                                `response` will contain information related to this operation.
  - name: doesShareExist(string, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.doesShareExist_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function doesShareExist(share: string, callback:
        ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: ''
  - name: doesShareExist(string, FileServiceOptions, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.doesShareExist
    package: azure-storage
    summary: Checks whether or not a share exists on the service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function doesShareExist(share: string, options?: FileServiceOptions,
        callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileServiceOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: |-
            `error` will contain information
                                                                                if an error occurs; otherwise `result` will
                                                                                be true if the share exists, or false if the share does not exist.
                                                                                `response` will contain information related to this operation.
  - name: >-
      generateSharedAccessSignature(string, string, string, SharedAccessPolicy,
      ContentSettingsHeaders)
    uid: >-
      azure-storage.export=.services.file.FileService.generateSharedAccessSignature
    package: azure-storage
    summary: Retrieves a shared access signature token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSharedAccessSignature(share: string, directory?:
        string, file?: string, sharedAccessPolicy: SharedAccessPolicy, headers?:
        ContentSettingsHeaders): string
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: The file name.
        - id: sharedAccessPolicy
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.SharedAccessPolicy" />
          description: The shared access policy.
        - id: headers
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContentSettingsHeaders" />
          description: The optional header values to set for a file returned wth this SAS.
      return:
        description: >-
          The shared access signature. Note this does not contain the leading
          "?".
        type: string
  - name: >-
      generateSharedAccessSignatureWithVersion(string, string, string,
      SharedAccessPolicy, string, ContentSettingsHeaders)
    uid: >-
      azure-storage.export=.services.file.FileService.generateSharedAccessSignatureWithVersion
    package: azure-storage
    summary: Retrieves a shared access signature token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSharedAccessSignatureWithVersion(share: string,
        directory?: string, file?: string, sharedAccessPolicy:
        SharedAccessPolicy, sasVersion?: string, headers?:
        ContentSettingsHeaders): string
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: The file name.
        - id: sharedAccessPolicy
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.SharedAccessPolicy" />
          description: The shared access policy.
        - id: sasVersion
          type: string
          description: >-
            An optional string indicating the desired SAS version to use. Value
            must be 2012-02-12 or later.
        - id: headers
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContentSettingsHeaders" />
          description: The optional header values to set for a file returned wth this SAS.
      return:
        description: >-
          The shared access signature query string. Note this string does not
          contain the leading "?".
        type: string
  - name: getDirectoryMetadata(string, string, ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.getDirectoryMetadata_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDirectoryMetadata(share: string, directory: string,
        callback: ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: ''
  - name: >-
      getDirectoryMetadata(string, string, FileServiceOptions,
      ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.getDirectoryMetadata
    package: azure-storage
    summary: Returns all user-defined metadata for the specified directory.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDirectoryMetadata(share: string, directory: string,
        options?: FileServiceOptions, callback: ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileServiceOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the file.
                                                                                    `response` will contain information related to this operation.
  - name: getDirectoryProperties(string, string, ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.getDirectoryProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDirectoryProperties(share: string, directory: string,
        callback: ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: ''
  - name: >-
      getDirectoryProperties(string, string, FileServiceOptions,
      ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.getDirectoryProperties
    package: azure-storage
    summary: Retrieves a directory and its properties from a specified account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDirectoryProperties(share: string, directory: string,
        options?: FileServiceOptions, callback: ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileServiceOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the directory.
                                                                            `response` will contain information related to this operation.
  - name: getFileMetadata(string, string, string, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.getFileMetadata_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileMetadata(share: string, directory: string, file: string,
        callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      getFileMetadata(string, string, string, FileServiceOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.getFileMetadata
    package: azure-storage
    summary: |-
      Returns all user-defined metadata for the specified file.
      It does not modify or return the content of the file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileMetadata(share: string, directory: string, file: string,
        options?: FileServiceOptions, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileServiceOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the file.
                                                                                    `response` will contain information related to this operation.
  - name: getFileProperties(string, string, string, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.getFileProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileProperties(share: string, directory: string, file:
        string, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      getFileProperties(string, string, string, FileServiceOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.getFileProperties
    package: azure-storage
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties for the file.

      It does not return or modify the content of the file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileProperties(share: string, directory: string, file:
        string, options?: FileServiceOptions, callback:
        ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileServiceOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the file.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      getFileToLocalFile(string, string, string, string,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.getFileToLocalFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileToLocalFile(share: string, directory: string, file:
        string, localFileName: string, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: localFileName
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      getFileToLocalFile(string, string, string, string, GetFileRequestOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.getFileToLocalFile
    package: azure-storage
    summary: >+
      Downloads an Azure file into a file.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var FileService = azure.createFileService();

      FileService.getFileToLocalFile('taskshare', taskdirectory', 'task1',
      'task1-download.txt', function(error, serverFile) {
        if(!error) {
          // file available in serverFile.file variable
        }
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileToLocalFile(share: string, directory: string, file:
        string, localFileName: string, options?: GetFileRequestOptions,
        callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: localFileName
          type: string
          description: The local path to the file to be downloaded.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.GetFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the file information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      getFileToStream(string, string, string, Writable,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.getFileToStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileToStream(share: string, directory: string, file: string,
        writeStream: Writable, callback: ErrorOrResult<FileResult>):
        SpeedSummary
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: writeStream
          type: Writable
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.streams.speedsummary.SpeedSummary" />
  - name: >-
      getFileToStream(string, string, string, Writable, GetFileRequestOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.getFileToStream
    package: azure-storage
    summary: >+
      Downloads a file into a stream.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var FileService = azure.createFileService();

      FileService.getFileToStream('taskshare', taskdirectory', 'task1',
      fs.createWriteStream('task1-download.txt'), function(error, serverFile) {
        if(!error) {
          // file available in serverFile.file variable
        }
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileToStream(share: string, directory: string, file: string,
        writeStream: Writable, options?: GetFileRequestOptions, callback:
        ErrorOrResult<FileResult>): SpeedSummary
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: writeStream
          type: Writable
          description: The Node.js Writable stream.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.GetFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the file information.
                                                                                    `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.streams.speedsummary.SpeedSummary" />
  - name: getFileToText(string, string, string, FileToText)
    uid: azure-storage.export=.services.file.FileService.getFileToText_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileToText(share: string, directory: string, file: string,
        callback: FileToText)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileToText" />
          description: ''
  - name: getFileToText(string, string, string, GetFileRequestOptions, FileToText)
    uid: azure-storage.export=.services.file.FileService.getFileToText
    package: azure-storage
    summary: Downloads a file into a text string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileToText(share: string, directory: string, file: string,
        options?: GetFileRequestOptions, callback: FileToText)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.GetFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileToText" />
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `text` will contain the file contents,
                                                                                    and `file` will contain the file information.
                                                                                    `response` will contain information related to this operation.
  - name: getServiceProperties(ErrorOrResult<ServiceProperties>)
    uid: azure-storage.export=.services.file.FileService.getServiceProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceProperties(callback:
        ErrorOrResult<ServiceProperties>)
      parameters:
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="common.models.ServicePropertiesResult.ServiceProperties" />&gt;
          description: ''
  - name: getServiceProperties(RequestOptions, ErrorOrResult<ServiceProperties>)
    uid: azure-storage.export=.services.file.FileService.getServiceProperties
    package: azure-storage
    summary: >-
      Gets the properties of a storage account's File service, including Azure
      Storage Analytics.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceProperties(options?: RequestOptions, callback:
        ErrorOrResult<ServiceProperties>)
      parameters:
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="common.models.ServicePropertiesResult.ServiceProperties" />&gt;
          description: >-
            `error` will contain information if an error occurs; otherwise,
            `result` will contain the properties
                                                                          and `response` will contain information related to this operation.
  - name: getShareAcl(string, ErrorOrResult<ShareAclResult>)
    uid: azure-storage.export=.services.file.FileService.getShareAcl_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getShareAcl(share: string, callback:
        ErrorOrResult<ShareAclResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareAclResult" />&gt;
          description: ''
  - name: getShareAcl(string, RequestOptions, ErrorOrResult<ShareAclResult>)
    uid: azure-storage.export=.services.file.FileService.getShareAcl
    package: azure-storage
    summary: Gets the share's ACL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getShareAcl(share: string, options?: RequestOptions, callback:
        ErrorOrResult<ShareAclResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareAclResult" />&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the share.
                                                                            `response` will contain information related to this operation.
  - name: getShareMetadata(string, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.getShareMetadata_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getShareMetadata(share: string, callback:
        ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: ''
  - name: getShareMetadata(string, FileServiceOptions, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.getShareMetadata
    package: azure-storage
    summary: Returns all user-defined metadata for the share.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getShareMetadata(share: string, options?: FileServiceOptions,
        callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileServiceOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: |-
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  information for the share.
                                                                                  `response` will contain information related to this operation.
  - name: getShareProperties(string, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.getShareProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getShareProperties(share: string, callback:
        ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: ''
  - name: getShareProperties(string, FileServiceOptions, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.getShareProperties
    package: azure-storage
    summary: Retrieves a share and its properties from a specified account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getShareProperties(share: string, options?: FileServiceOptions,
        callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileServiceOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the share.
                                                                            `response` will contain information related to this operation.
  - name: getShareStats(string, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.getShareStats_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getShareStats(share: string, callback:
        ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: ''
  - name: getShareStats(string, RequestOptions, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.getShareStats
    package: azure-storage
    summary: Gets the share statistics for a share.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getShareStats(share: string, options?: RequestOptions,
        callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: >-
            `error` will contain information if an error occurs; otherwise,
            `result` will contain the stats and
                                                                              `response` will contain information related to this operation.
  - name: getUrl(string, string, string, string, boolean, string)
    uid: azure-storage.export=.services.file.FileService.getUrl
    package: azure-storage
    summary: >+
      Retrieves a file or directory URL.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var FileService = azure.createFileService();

      var url = FileService.getUrl(shareName, directoryName, fileName, sasToken,
      true);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getUrl(share: string, directory: string, file?: string,
        sasToken?: string, primary?: boolean, shareSnapshotId?: string): string
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: sasToken
          type: string
          description: The Shared Access Signature token.
        - id: primary
          type: boolean
          description: >-
            A boolean representing whether to use the primary or the secondary
            endpoint.
        - id: shareSnapshotId
          type: string
          description: The snapshot identifier of the share.
      return:
        description: The formatted URL string.
        type: string
  - name: >-
      listFilesAndDirectoriesSegmented(string, string, ContinuationToken,
      ErrorOrResult<ListFilesAndDirectoriesResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.listFilesAndDirectoriesSegmented_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFilesAndDirectoriesSegmented(share: string, directory:
        string, currentToken: ContinuationToken, callback:
        ErrorOrResult<ListFilesAndDirectoriesResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContinuationToken" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListFilesAndDirectoriesResult" />&gt;
          description: ''
  - name: >-
      listFilesAndDirectoriesSegmented(string, string, ContinuationToken,
      ListRequestOptions, ErrorOrResult<ListFilesAndDirectoriesResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.listFilesAndDirectoriesSegmented
    package: azure-storage
    summary: Lists a segment containing a collection of file items in the directory.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFilesAndDirectoriesSegmented(share: string, directory:
        string, currentToken: ContinuationToken, options?: ListRequestOptions,
        callback: ErrorOrResult<ListFilesAndDirectoriesResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListFilesAndDirectoriesResult" />&gt;
          description: |-
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain
                                                                          entries.files, entries.directories and the continuationToken for the next listing operation.
                                                                          `response` will contain information related to this operation.
  - name: >-
      listFilesAndDirectoriesSegmentedWithPrefix(string, string, string,
      ContinuationToken, ErrorOrResult<ListFilesAndDirectoriesResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.listFilesAndDirectoriesSegmentedWithPrefix_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFilesAndDirectoriesSegmentedWithPrefix(share: string,
        directory: string, prefix: string, currentToken: ContinuationToken,
        callback: ErrorOrResult<ListFilesAndDirectoriesResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: prefix
          type: string
          description: ''
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContinuationToken" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListFilesAndDirectoriesResult" />&gt;
          description: ''
  - name: >-
      listFilesAndDirectoriesSegmentedWithPrefix(string, string, string,
      ContinuationToken, ListRequestOptions,
      ErrorOrResult<ListFilesAndDirectoriesResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.listFilesAndDirectoriesSegmentedWithPrefix
    package: azure-storage
    summary: Lists a segment containing a collection of file items in the directory.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFilesAndDirectoriesSegmentedWithPrefix(share: string,
        directory: string, prefix: string, currentToken: ContinuationToken,
        options?: ListRequestOptions, callback:
        ErrorOrResult<ListFilesAndDirectoriesResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: prefix
          type: string
          description: The prefix of the directory/files name.
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListFilesAndDirectoriesResult" />&gt;
          description: |-
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain
                                                                          entries.files, entries.directories and the continuationToken for the next listing operation.
                                                                          `response` will contain information related to this operation.
  - name: listRanges(string, string, string, ErrorOrResult<Range[]>)
    uid: azure-storage.export=.services.file.FileService.listRanges_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRanges(share: string, directory: string, file: string,
        callback: ErrorOrResult<Range[]>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref uid="common.Range" />[]&gt;
          description: ''
  - name: >-
      listRanges(string, string, string, ListRangeRequestOptions,
      ErrorOrResult<Range[]>)
    uid: azure-storage.export=.services.file.FileService.listRanges
    package: azure-storage
    summary: >-
      Lists file ranges. Lists all of the ranges by default, or only the ranges
      over a specific range of bytes if rangeStart and rangeEnd are specified.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRanges(share: string, directory: string, file: string,
        options?: ListRangeRequestOptions, callback: ErrorOrResult<Range[]>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListRangeRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref uid="common.Range" />[]&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the range information.
                                                                                    `response` will contain information related to this operation.
  - name: listSharesSegmented(ContinuationToken, ErrorOrResult<ListSharesResult>)
    uid: azure-storage.export=.services.file.FileService.listSharesSegmented_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listSharesSegmented(currentToken: ContinuationToken, callback:
        ErrorOrResult<ListSharesResult>)
      parameters:
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContinuationToken" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListSharesResult" />&gt;
          description: ''
  - name: >-
      listSharesSegmented(ContinuationToken, ListShareRequestOptions,
      ErrorOrResult<ListSharesResult>)
    uid: azure-storage.export=.services.file.FileService.listSharesSegmented
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of share items under the specified
      account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listSharesSegmented(currentToken: ContinuationToken, options?:
        ListShareRequestOptions, callback: ErrorOrResult<ListSharesResult>)
      parameters:
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListShareRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListSharesResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of shares and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      listSharesSegmentedWithPrefix(string, ContinuationToken,
      ErrorOrResult<ListSharesResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.listSharesSegmentedWithPrefix_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listSharesSegmentedWithPrefix(prefix: string, currentToken:
        ContinuationToken, callback: ErrorOrResult<ListSharesResult>)
      parameters:
        - id: prefix
          type: string
          description: ''
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContinuationToken" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListSharesResult" />&gt;
          description: ''
  - name: >-
      listSharesSegmentedWithPrefix(string, ContinuationToken,
      ListShareRequestOptions, ErrorOrResult<ListSharesResult>)
    uid: >-
      azure-storage.export=.services.file.FileService.listSharesSegmentedWithPrefix
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of share items whose names begin
      with the specified prefix under the specified account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listSharesSegmentedWithPrefix(prefix: string, currentToken:
        ContinuationToken, options?: ListShareRequestOptions, callback:
        ErrorOrResult<ListSharesResult>)
      parameters:
        - id: prefix
          type: string
          description: The prefix of the share name.
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListShareRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ListSharesResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of shares and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
  - name: resizeFile(string, string, string, number, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.resizeFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resizeFile(share: string, directory: string, file: string,
        size: number, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: size
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      resizeFile(string, string, string, number, RequestOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.resizeFile
    package: azure-storage
    summary: Resizes a file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resizeFile(share: string, directory: string, file: string,
        size: number, options?: RequestOptions, callback:
        ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: size
          type: number
          description: The size of the file, in bytes.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the file.
                                                                                      `response` will contain information related to this operation.
  - name: >-
      setDirectoryMetadata(string, string, Map<string>,
      ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.setDirectoryMetadata_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setDirectoryMetadata(share: string, directory: string,
        metadata: Map<string>, callback: ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: metadata
          type: Map&lt;string&gt;
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: ''
  - name: >-
      setDirectoryMetadata(string, string, Map<string>, RequestOptions,
      ErrorOrResult<DirectoryResult>)
    uid: azure-storage.export=.services.file.FileService.setDirectoryMetadata
    package: azure-storage
    summary: >-
      Sets user-defined metadata for the specified directory as one or more
      name-value pairs
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setDirectoryMetadata(share: string, directory: string,
        metadata: Map<string>, options?: RequestOptions, callback:
        ErrorOrResult<DirectoryResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: metadata
          type: Map&lt;string&gt;
          description: The metadata key/value pairs.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.DirectoryResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information on the file.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      setFileMetadata(string, string, string, Map<string>,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.setFileMetadata_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setFileMetadata(share: string, directory: string, file: string,
        metadata: Map<string>, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: metadata
          type: Map&lt;string&gt;
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      setFileMetadata(string, string, string, Map<string>, RequestOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.setFileMetadata
    package: azure-storage
    summary: >-
      Sets user-defined metadata for the specified file as one or more
      name-value pairs

      It does not modify or return the content of the file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setFileMetadata(share: string, directory: string, file: string,
        metadata: Map<string>, options?: RequestOptions, callback:
        ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: metadata
          type: Map&lt;string&gt;
          description: The metadata key/value pairs.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information on the file.
                                                                                    `response` will contain information related to this operation.
  - name: setFileProperties(string, string, string, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.setFileProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setFileProperties(share: string, directory: string, file:
        string, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: directory
          type: string
          description: ''
        - id: file
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: >-
      setFileProperties(string, string, string, SetFilePropertiesRequestOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.setFileProperties
    package: azure-storage
    summary: |-
      Sets user-defined properties for the specified file.
      It does not modify or return the content of the file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setFileProperties(share: string, directory: string, file:
        string, options?: SetFilePropertiesRequestOptions, callback:
        ErrorOrResult<FileResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: directory
          type: string
          description: The directory name. Use '' to refer to the base directory.
        - id: file
          type: string
          description: >-
            The file name. File names may not start or end with the delimiter
            '/'.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.SetFilePropertiesRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the file.
                                                                                    `response` will contain information related to this operation.
  - name: setServiceProperties(ServiceProperties, ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.setServiceProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: ServiceProperties,
        callback: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.models.ServicePropertiesResult.ServiceProperties" />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: ''
  - name: setServiceProperties(ServiceProperties, RequestOptions, ErrorOrResponse)
    uid: azure-storage.export=.services.file.FileService.setServiceProperties
    package: azure-storage
    summary: >-
      Sets the properties of a storage account's File service, including Azure
      Storage Analytics.

      You can also use this operation to set the default request version for all
      incoming requests that do not have a version specified.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: ServiceProperties,
        options?: RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.models.ServicePropertiesResult.ServiceProperties" />
          description: The service properties.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information
                                                                                 if an error occurs; otherwise, `response`
                                                                                 will contain information related to this operation.
  - name: >-
      setShareAcl(string, {[key: string]: common.AccessPolicy},
      ErrorOrResult<ShareAclResult>)
    uid: azure-storage.export=.services.file.FileService.setShareAcl_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setShareAcl(share: string, signedIdentifiers: {[key: string]:
        common.AccessPolicy}, callback: ErrorOrResult<ShareAclResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: signedIdentifiers
          type: >-
            {[key: string]: <xref uid="azure-storage.export" />=.<xref
            uid="common.AccessPolicy" />}
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareAclResult" />&gt;
          description: ''
  - name: >-
      setShareAcl(string, {[key: string]: common.AccessPolicy}, RequestOptions,
      ErrorOrResult<ShareAclResult>)
    uid: azure-storage.export=.services.file.FileService.setShareAcl
    package: azure-storage
    summary: Updates the share's ACL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setShareAcl(share: string, signedIdentifiers: {[key: string]:
        common.AccessPolicy}, options?: RequestOptions, callback:
        ErrorOrResult<ShareAclResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: signedIdentifiers
          type: >-
            {[key: string]: <xref uid="azure-storage.export" />=.<xref
            uid="common.AccessPolicy" />}
          description: The signed identifiers. Signed identifiers must be in an array.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareAclResult" />&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the share.
                                                                            `response` will contain information related to this operation.
  - name: setShareMetadata(string, Map<string>, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.setShareMetadata_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setShareMetadata(share: string, metadata: Map<string>,
        callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: metadata
          type: Map&lt;string&gt;
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: ''
  - name: >-
      setShareMetadata(string, Map<string>, RequestOptions,
      ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.setShareMetadata
    package: azure-storage
    summary: >-
      Sets the share's metadata.


      Calling the Set Share Metadata operation overwrites all existing metadata
      that is associated with the share.

      It's not possible to modify an individual name/value pair.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setShareMetadata(share: string, metadata: Map<string>,
        options?: RequestOptions, callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: metadata
          type: Map&lt;string&gt;
          description: The metadata key/value pairs.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: |-
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
  - name: setShareProperties(string, ShareProperties, ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.setShareProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setShareProperties(share: string, properties: ShareProperties,
        callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: ''
        - id: properties
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareProperties" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: ''
  - name: >-
      setShareProperties(string, ShareProperties, RequestOptions,
      ErrorOrResult<ShareResult>)
    uid: azure-storage.export=.services.file.FileService.setShareProperties
    package: azure-storage
    summary: Sets the properties for the specified share.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setShareProperties(share: string, properties?: ShareProperties,
        options?: RequestOptions, callback: ErrorOrResult<ShareResult>)
      parameters:
        - id: share
          type: string
          description: The share name.
        - id: properties
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareProperties" />
          description: The share properties to set.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.ShareResult" />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the share.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      startCopyFile(string, string, string, string, CopyFileRequestOptions,
      ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.startCopyFile
    package: azure-storage
    summary: Starts to copy a file to a destination within the storage account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startCopyFile(sourceUri: string, targetshare: string,
        targetdirectory: string, targetfile: string, options?:
        CopyFileRequestOptions, callback: ErrorOrResult<FileResult>)
      parameters:
        - id: sourceUri
          type: string
          description: The source file or blob URI.
        - id: targetshare
          type: string
          description: ''
        - id: targetdirectory
          type: string
          description: ''
        - id: targetfile
          type: string
          description: ''
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.CopyFileRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: |-
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  the file information.
                                                                                  `response` will contain information related to this operation.
  - name: startCopyFile(string, string, string, string, ErrorOrResult<FileResult>)
    uid: azure-storage.export=.services.file.FileService.startCopyFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startCopyFile(sourceUri: string, targetshare: string,
        targetdirectory: string, targetfile: string, callback:
        ErrorOrResult<FileResult>)
      parameters:
        - id: sourceUri
          type: string
          description: ''
        - id: targetshare
          type: string
          description: ''
        - id: targetdirectory
          type: string
          description: ''
        - id: targetfile
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.file.FileService.FileResult" />&gt;
          description: ''
  - name: withFilter(IFilter)
    uid: azure-storage.export=.services.file.FileService.withFilter
    package: azure-storage
    summary: >-
      Associate a filtering operation with this FileService. Filtering
      operations

      can include logging, automatically retrying, etc. Filter operations are
      objects

      that implement a method with the signature:

          "function handle (requestOptions, next)".

      After doing its preprocessing on the request options, the method needs to
      call

      "next" passing a callback with the following signature:

      signature:

          "function (returnObject, finalCallback, next)"

      In this callback, and after processing the returnObject (the response from
      the

      request to the server), the callback needs to either invoke next if it
      exists to

      continue processing other filters or simply invoke finalCallback otherwise
      to end

      up the service invocation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function withFilter(newFilter: IFilter): FileService'
      parameters:
        - id: newFilter
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.filters.IFilter" />
          description: ''
      return:
        description: A new service client with the filter applied.
        type: FileService
extends: >-
  <xref uid="azure-storage.export" />=.<xref
  uid="common.services.storageserviceclient.StorageServiceClient" />
