### YamlMime:TSType
name: TableService
uid: azure-storage.export=.services.table.TableService
package: azure-storage
summary: ''
fullName: TableService
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: defaultPayloadFormat
    uid: azure-storage.export=.services.table.TableService.defaultPayloadFormat
    package: azure-storage
    summary: ''
    fullName: defaultPayloadFormat
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultPayloadFormat: string'
      return:
        description: ''
        type: string
inheritedProperties:
  - name: defaultClientRequestTimeoutInMs
    uid: >-
      azure-storage.export=.services.table.TableService.defaultClientRequestTimeoutInMs
    package: azure-storage
    summary: >-
      The default timeout of client requests, in milliseconds, to use for the
      request.
    fullName: defaultClientRequestTimeoutInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultClientRequestTimeoutInMs: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultClientRequestTimeoutInMs](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultClientRequestTimeoutInMs)
  - name: defaultLocationMode
    uid: azure-storage.export=.services.table.TableService.defaultLocationMode
    package: azure-storage
    summary: The default location mode for requests made via the service.
    fullName: defaultLocationMode
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultLocationMode: LocationMode'
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.util.storageutilities.LocationMode" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultLocationMode](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultLocationMode)
  - name: defaultMaximumExecutionTimeInMs
    uid: >-
      azure-storage.export=.services.table.TableService.defaultMaximumExecutionTimeInMs
    package: azure-storage
    summary: >-
      The default maximum execution time across all potential retries, for
      requests made via the service.
    fullName: defaultMaximumExecutionTimeInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultMaximumExecutionTimeInMs: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultMaximumExecutionTimeInMs](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultMaximumExecutionTimeInMs)
  - name: defaultTimeoutIntervalInMs
    uid: >-
      azure-storage.export=.services.table.TableService.defaultTimeoutIntervalInMs
    package: azure-storage
    summary: >-
      The default timeout interval, in milliseconds, to use for request made via
      the service.
    fullName: defaultTimeoutIntervalInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultTimeoutIntervalInMs: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultTimeoutIntervalInMs](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultTimeoutIntervalInMs)
  - name: enableGlobalHttpAgent
    uid: azure-storage.export=.services.table.TableService.enableGlobalHttpAgent
    package: azure-storage
    summary: >-
      Determines whether global HTTP(s) agent is enabled; true to use Global
      HTTP(s) agent; otherwise, false to use

      http(s).Agent({keepAlive:true}).
    fullName: enableGlobalHttpAgent
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'enableGlobalHttpAgent: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.enableGlobalHttpAgent](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.enableGlobalHttpAgent)
  - name: logger
    uid: azure-storage.export=.services.table.TableService.logger
    package: azure-storage
    summary: The logging settings object.
    fullName: logger
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'logger: Logger'
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.diagnostics.logger.Logger" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.logger](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.logger)
  - name: proxy
    uid: azure-storage.export=.services.table.TableService.proxy
    package: azure-storage
    summary: The proxy object specified by caller.
    fullName: proxy
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'proxy: Proxy'
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.Proxy" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.proxy](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.proxy)
  - name: useNagleAlgorithm
    uid: azure-storage.export=.services.table.TableService.useNagleAlgorithm
    package: azure-storage
    summary: >-
      Determines whether the Nagle algorithm is used for requests made via the
      Queue service; true to use the

      Nagle algorithm; otherwise, false. The default value is false.
    fullName: useNagleAlgorithm
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'useNagleAlgorithm: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.useNagleAlgorithm](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.useNagleAlgorithm)
inheritedMethods:
  - name: addListener(string, Function)
    uid: azure-storage.export=.services.table.TableService.addListener
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function addListener(event: string, listener: Function): TableService'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: TableService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.addListener](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.addListener)
  - name: emit(string, any[])
    uid: azure-storage.export=.services.table.TableService.emit
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit(event: string, args: any[]): boolean'
      parameters:
        - id: event
          type: string
          description: ''
        - id: args
          type: any[]
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.emit](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.emit)
  - name: listeners(string)
    uid: azure-storage.export=.services.table.TableService.listeners
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners(event: string): Function[]'
      parameters:
        - id: event
          type: string
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.listeners](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.listeners)
  - name: on(string, Function)
    uid: azure-storage.export=.services.table.TableService.on
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function on(event: string, listener: Function): TableService'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: TableService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.on](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.on)
  - name: once(string, Function)
    uid: azure-storage.export=.services.table.TableService.once
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function once(event: string, listener: Function): TableService'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: TableService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.once](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.once)
  - name: removeAllListeners(string)
    uid: azure-storage.export=.services.table.TableService.removeAllListeners
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string): TableService'
      parameters:
        - id: event
          type: string
          description: ''
      return:
        description: ''
        type: TableService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.removeAllListeners](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.removeAllListeners)
  - name: removeListener(string, Function)
    uid: azure-storage.export=.services.table.TableService.removeListener
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeListener(event: string, listener: Function): TableService'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: TableService
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.removeListener](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.removeListener)
  - name: setMaxListeners(number)
    uid: azure-storage.export=.services.table.TableService.setMaxListeners
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type: number
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.setMaxListeners](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.setMaxListeners)
  - name: setProxy(Proxy)
    uid: azure-storage.export=.services.table.TableService.setProxy
    package: azure-storage
    summary: Sets proxy object specified by caller.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setProxy(proxy: Proxy)'
      parameters:
        - id: proxy
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.services.storageserviceclient.Proxy" />
          description: |-
            proxy to use for tunneling
                                                   {
                                                    host: hostname
                                                    port: port number
                                                    proxyAuth: 'user:password' for basic auth
                                                    headers: {...} headers for proxy server
                                                    key: key for proxy server
                                                    ca: ca for proxy server
                                                    cert: cert for proxy server
                                                   }
                                                   if null or undefined, clears proxy
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.setProxy](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.setProxy)
methods:
  - name: createTable(string, ErrorOrResult<TableResult>)
    uid: azure-storage.export=.services.table.TableService.createTable_1
    package: azure-storage
    summary: Creates a new table within a storage account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createTable(table: string, callback:
        ErrorOrResult<TableResult>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the new table information.
                                                                                `response` will contain information related to this operation.
  - name: createTable(string, RequestOptions, ErrorOrResult<TableResult>)
    uid: azure-storage.export=.services.table.TableService.createTable
    package: azure-storage
    summary: Creates a new table within a storage account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createTable(table: string, options?: RequestOptions, callback:
        ErrorOrResult<TableResult>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the new table information.
                                                                                `response` will contain information related to this operation.
  - name: createTableIfNotExists(string, ErrorOrResult<TableResult>)
    uid: azure-storage.export=.services.table.TableService.createTableIfNotExists_1
    package: azure-storage
    summary: |+
      Creates a new table within a storage account if it does not exists.

      **Example**

      ```ts
      var azure = require('azure-storage');
      var tableService = azure.createTableService();
      tableService.createTableIfNotExists('tasktable', function(error) {
        if(!error) {
          // Table created or exists
        }
      });
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createTableIfNotExists(table: string, callback:
        ErrorOrResult<TableResult>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                `result` will be `true` if table was created, false otherwise
                                                                                `response` will contain information related to this operation.
  - name: createTableIfNotExists(string, RequestOptions, ErrorOrResult<TableResult>)
    uid: azure-storage.export=.services.table.TableService.createTableIfNotExists
    package: azure-storage
    summary: |+
      Creates a new table within a storage account if it does not exists.

      **Example**

      ```ts
      var azure = require('azure-storage');
      var tableService = azure.createTableService();
      tableService.createTableIfNotExists('tasktable', function(error) {
        if(!error) {
          // Table created or exists
        }
      });
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createTableIfNotExists(table: string, options?: RequestOptions,
        callback: ErrorOrResult<TableResult>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                `result` will be `true` if table was created, false otherwise
                                                                                `response` will contain information related to this operation.
  - name: deleteEntity<T>(string, T, ErrorOrResponse)
    uid: azure-storage.export=.services.table.TableService.deleteEntity_1
    package: azure-storage
    summary: >-
      Deletes an entity within a table. To delete conditionally based on etag,
      set entity['.metadata']['etag'].
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteEntity<T>(table: string, entityDescriptor: T, callback:
        ErrorOrResponse)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information if an error occurs;
                                                                                `response` will contain information related to this operation.
  - name: deleteEntity<T>(string, T, RequestOptions, ErrorOrResponse)
    uid: azure-storage.export=.services.table.TableService.deleteEntity
    package: azure-storage
    summary: >-
      Deletes an entity within a table. To delete conditionally based on etag,
      set entity['.metadata']['etag'].
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteEntity<T>(table: string, entityDescriptor: T, options?:
        RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information if an error occurs;
                                                                                `response` will contain information related to this operation.
  - name: deleteTable(string, ErrorOrResponse)
    uid: azure-storage.export=.services.table.TableService.deleteTable_1
    package: azure-storage
    summary: Deletes a table from a storage account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function deleteTable(table: string, callback: ErrorOrResponse)'
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information if an error occurs;
                                                                                `response` will contain information related to this operation.
  - name: deleteTable(string, RequestOptions, ErrorOrResponse)
    uid: azure-storage.export=.services.table.TableService.deleteTable
    package: azure-storage
    summary: Deletes a table from a storage account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteTable(table: string, options?: RequestOptions, callback:
        ErrorOrResponse)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information if an error occurs;
                                                                                `response` will contain information related to this operation.
  - name: deleteTableIfExists(string, ErrorOrResult<boolean>)
    uid: azure-storage.export=.services.table.TableService.deleteTableIfExists_1
    package: azure-storage
    summary: Deletes a table from a storage account, if it exists.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteTableIfExists(table: string, callback:
        ErrorOrResult<boolean>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;boolean&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                `result` will be `true` if table was deleted, false otherwise
                                                                                `response` will contain information related to this operation.
  - name: deleteTableIfExists(string, RequestOptions, ErrorOrResult<boolean>)
    uid: azure-storage.export=.services.table.TableService.deleteTableIfExists
    package: azure-storage
    summary: Deletes a table from a storage account, if it exists.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteTableIfExists(table: string, options?: RequestOptions,
        callback: ErrorOrResult<boolean>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;boolean&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                `result` will be `true` if table was deleted, false otherwise
                                                                                `response` will contain information related to this operation.
  - name: doesTableExist(string, ErrorOrResult<TableResult>)
    uid: azure-storage.export=.services.table.TableService.doesTableExist_1
    package: azure-storage
    summary: Checks whether or not a table exists on the service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function doesTableExist(table: string, callback:
        ErrorOrResult<TableResult>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain be true if the table exists, or false if the table does not exist.
                                                                                `response` will contain information related to this operation.
  - name: doesTableExist(string, RequestOptions, ErrorOrResult<TableResult>)
    uid: azure-storage.export=.services.table.TableService.doesTableExist
    package: azure-storage
    summary: Checks whether or not a table exists on the service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function doesTableExist(table: string, options?: RequestOptions,
        callback: ErrorOrResult<TableResult>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain be true if the table exists, or false if the table does not exist.
                                                                                `response` will contain information related to this operation.
  - name: executeBatch(string, TableBatch, ErrorOrResult<BatchResult[]>)
    uid: azure-storage.export=.services.table.TableService.executeBatch_1
    package: azure-storage
    summary: Executes the operations in the batch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function executeBatch(table: string, batch: TableBatch, callback:
        ErrorOrResult<BatchResult[]>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: batch
          type: TableBatch
          description: The table batch to execute.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.BatchResult" />[]&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                        otherwise `result` will contain responses for each operation executed in the batch;
                                                                                        `result.entity` will contain the entity information for each operation executed.
                                                                                        `result.response` will contain the response for each operations executed.
                                                                                        `response` will contain information related to this operation.
  - name: >-
      executeBatch(string, TableBatch, TableEntityRequestOptions,
      ErrorOrResult<BatchResult[]>)
    uid: azure-storage.export=.services.table.TableService.executeBatch
    package: azure-storage
    summary: Executes the operations in the batch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function executeBatch(table: string, batch: TableBatch, options?:
        TableEntityRequestOptions, callback: ErrorOrResult<BatchResult[]>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: batch
          type: TableBatch
          description: The table batch to execute.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableEntityRequestOptions" />
          description: The create options or callback function.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.BatchResult" />[]&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                        otherwise `result` will contain responses for each operation executed in the batch;
                                                                                        `result.entity` will contain the entity information for each operation executed.
                                                                                        `result.response` will contain the response for each operations executed.
                                                                                        `response` will contain information related to this operation.
  - name: generateSharedAccessSignature(string, TableSharedAccessPolicy)
    uid: >-
      azure-storage.export=.services.table.TableService.generateSharedAccessSignature
    package: azure-storage
    summary: Retrieves a shared access signature token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSharedAccessSignature(table: string,
        sharedAccessPolicy: TableSharedAccessPolicy): string
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: sharedAccessPolicy
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableSharedAccessPolicy" />
          description: The shared access policy.
      return:
        description: An object with the shared access signature.
        type: string
  - name: >-
      generateSharedAccessSignatureWithVersion(string, TableSharedAccessPolicy,
      string)
    uid: >-
      azure-storage.export=.services.table.TableService.generateSharedAccessSignatureWithVersion
    package: azure-storage
    summary: Retrieves a shared access signature token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSharedAccessSignatureWithVersion(table: string,
        sharedAccessPolicy: TableSharedAccessPolicy, sasVersion?: string):
        string
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: sharedAccessPolicy
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableSharedAccessPolicy" />
          description: The shared access policy.
        - id: sasVersion
          type: string
          description: >-
            An optional string indicating the desired SAS version to use. Value
            must be 2012-02-12 or later.
      return:
        description: An object with the shared access signature.
        type: string
  - name: getServiceProperties(ErrorOrResult<ServiceProperties>)
    uid: azure-storage.export=.services.table.TableService.getServiceProperties_1
    package: azure-storage
    summary: >-
      Gets the properties of a storage account’s Table service, including Azure
      Storage Analytics.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceProperties(callback:
        ErrorOrResult<ServiceProperties>)
      parameters:
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="common.models.ServicePropertiesResult.ServiceProperties" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                     otherwise `result` will contain the properties.
                                                                                    `response` will contain information related to this operation.
  - name: getServiceProperties(RequestOptions, ErrorOrResult<ServiceProperties>)
    uid: azure-storage.export=.services.table.TableService.getServiceProperties
    package: azure-storage
    summary: >-
      Gets the properties of a storage account’s Table service, including Azure
      Storage Analytics.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceProperties(options?: RequestOptions, callback:
        ErrorOrResult<ServiceProperties>)
      parameters:
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="common.models.ServicePropertiesResult.ServiceProperties" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                     otherwise `result` will contain the properties.
                                                                                    `response` will contain information related to this operation.
  - name: getServiceStats(ErrorOrResult<ServiceStats>)
    uid: azure-storage.export=.services.table.TableService.getServiceStats_1
    package: azure-storage
    summary: Gets the service stats for a storage account’s Table service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getServiceStats(callback: ErrorOrResult<ServiceStats>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="common.models.ServiceStats" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the properties.
                                                                                    `response` will contain information related to this operation.
  - name: getServiceStats(RequestOptions, ErrorOrResult<ServiceStats>)
    uid: azure-storage.export=.services.table.TableService.getServiceStats
    package: azure-storage
    summary: Gets the service stats for a storage account’s Table service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceStats(options?: RequestOptions, callback:
        ErrorOrResult<ServiceStats>)
      parameters:
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="common.models.ServiceStats" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the properties.
                                                                                    `response` will contain information related to this operation.
  - name: getTableAcl(string, ErrorOrResult<GetTableAclResult>)
    uid: azure-storage.export=.services.table.TableService.getTableAcl_1
    package: azure-storage
    summary: Gets the table's ACL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getTableAcl(table: string, callback:
        ErrorOrResult<GetTableAclResult>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.GetTableAclResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                     otherwise `result` will contain the ACL information for the table.
                                                                                     `response` will contain information related to this operation.
  - name: getTableAcl(string, RequestOptions, ErrorOrResult<GetTableAclResult>)
    uid: azure-storage.export=.services.table.TableService.getTableAcl
    package: azure-storage
    summary: Gets the table's ACL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getTableAcl(table: string, options?: RequestOptions, callback:
        ErrorOrResult<GetTableAclResult>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.GetTableAclResult" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                     otherwise `result` will contain the ACL information for the table.
                                                                                     `response` will contain information related to this operation.
  - name: getUrl(string, string, boolean)
    uid: azure-storage.export=.services.table.TableService.getUrl
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getUrl(table: string, sasToken?: string, primary?: boolean):
        string
      parameters:
        - id: table
          type: string
          description: ''
        - id: sasToken
          type: string
          description: ''
        - id: primary
          type: boolean
          description: ''
      return:
        description: ''
        type: string
  - name: insertEntity<T>(string, T, ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.insertEntity_2
    package: azure-storage
    summary: Inserts a new entity into a table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function insertEntity<T>(table: string, entityDescriptor: T, callback:
        ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                        otherwise `result` will contain the entity information.
                                                                                        `response` will contain information related to this operation.
  - name: >-
      insertEntity<T>(string, T, InsertEntityRequestOptions, ErrorOrResult<T |
      EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.insertEntity
    package: azure-storage
    summary: |+
      Inserts a new entity into a table.

      **Example**

      ```ts
      var azure = require('azure-storage');
      var tableService = azure.createTableService();
      var task1 = {
        PartitionKey : {'_': 'tasksSeattle', '$':'Edm.String'},
        RowKey: {'_': '1', '$':'Edm.String'},
        Description: {'_': 'Take out the trash', '$':'Edm.String'},
        DueDate: {'_': new Date(2011, 12, 14, 12), '$':'Edm.DateTime'}
      };
      tableService.insertEntity('tasktable', task1, function(error) {
        if(!error) {
          // Entity inserted
        }
      });
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function insertEntity<T>(table: string, entityDescriptor: T, options?:
        InsertEntityRequestOptions, callback: ErrorOrResult<T | EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.InsertEntityRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;T | <xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                        otherwise `result` will contain the entity information.
                                                                                        `response` will contain information related to this operation.
  - name: insertEntity<T>(string, T, RequestOptions, ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.insertEntity_1
    package: azure-storage
    summary: Inserts a new entity into a table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function insertEntity<T>(table: string, entityDescriptor: T, options?:
        RequestOptions, callback: ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                        otherwise `result` will contain the entity information.
                                                                                        `response` will contain information related to this operation.
  - name: insertOrMergeEntity<T>(string, T, ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.insertOrMergeEntity_1
    package: azure-storage
    summary: >-
      Inserts or updates an existing entity within a table by merging new
      property values into the entity.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function insertOrMergeEntity<T>(table: string, entityDescriptor: T,
        callback: ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the entity information.
                                                                                `response` will contain information related to this operation.
  - name: >-
      insertOrMergeEntity<T>(string, T, RequestOptions,
      ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.insertOrMergeEntity
    package: azure-storage
    summary: >-
      Inserts or updates an existing entity within a table by merging new
      property values into the entity.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function insertOrMergeEntity<T>(table: string, entityDescriptor: T,
        options?: RequestOptions, callback: ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the entity information.
                                                                                `response` will contain information related to this operation.
  - name: insertOrReplaceEntity<T>(string, T, ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.insertOrReplaceEntity_1
    package: azure-storage
    summary: Inserts or updates a new entity into a table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function insertOrReplaceEntity<T>(table: string, entityDescriptor: T,
        callback: ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the entity information.
                                                                                `response` will contain information related to this operation.
  - name: >-
      insertOrReplaceEntity<T>(string, T, RequestOptions,
      ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.insertOrReplaceEntity
    package: azure-storage
    summary: Inserts or updates a new entity into a table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function insertOrReplaceEntity<T>(table: string, entityDescriptor: T,
        options?: RequestOptions, callback: ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the entity information.
                                                                                `response` will contain information related to this operation.
  - name: >-
      listTablesSegmented(ListTablesContinuationToken,
      ErrorOrResult<ListTablesResponse>)
    uid: azure-storage.export=.services.table.TableService.listTablesSegmented_1
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of table items under the specified
      account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listTablesSegmented(currentToken: ListTablesContinuationToken,
        callback: ErrorOrResult<ListTablesResponse>)
      parameters:
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesResponse" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                          otherwise `result` will contain `entries` and `continuationToken`.
                                                                                          `entries`  gives a list of tables and the `continuationToken` is used for the next listing operation.
                                                                                          `response` will contain information related to this operation.
  - name: >-
      listTablesSegmented(ListTablesContinuationToken, ListTablesRequestOptions,
      ErrorOrResult<ListTablesResponse>)
    uid: azure-storage.export=.services.table.TableService.listTablesSegmented
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of table items under the specified
      account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listTablesSegmented(currentToken: ListTablesContinuationToken,
        options?: ListTablesRequestOptions, callback:
        ErrorOrResult<ListTablesResponse>)
      parameters:
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesRequestOptions" />
          description: The create options or callback function.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesResponse" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                          otherwise `result` will contain `entries` and `continuationToken`.
                                                                                          `entries`  gives a list of tables and the `continuationToken` is used for the next listing operation.
                                                                                          `response` will contain information related to this operation.
  - name: >-
      listTablesSegmentedWithPrefix(string, ListTablesContinuationToken,
      ErrorOrResult<ListTablesResponse>)
    uid: >-
      azure-storage.export=.services.table.TableService.listTablesSegmentedWithPrefix_1
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of table items under the specified
      account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listTablesSegmentedWithPrefix(prefix: string, currentToken:
        ListTablesContinuationToken, callback:
        ErrorOrResult<ListTablesResponse>)
      parameters:
        - id: prefix
          type: string
          description: The prefix of the table name.
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesResponse" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                          otherwise `result` will contain `entries` and `continuationToken`.
                                                                                          `entries`  gives a list of tables and the `continuationToken` is used for the next listing operation.
                                                                                          `response` will contain information related to this operation.
  - name: >-
      listTablesSegmentedWithPrefix(string, ListTablesContinuationToken,
      ListTablesRequestOptions, ErrorOrResult<ListTablesResponse>)
    uid: >-
      azure-storage.export=.services.table.TableService.listTablesSegmentedWithPrefix
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of table items under the specified
      account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listTablesSegmentedWithPrefix(prefix: string, currentToken:
        ListTablesContinuationToken, options?: ListTablesRequestOptions,
        callback: ErrorOrResult<ListTablesResponse>)
      parameters:
        - id: prefix
          type: string
          description: The prefix of the table name.
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesRequestOptions" />
          description: The create options or callback function.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.ListTablesResponse" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                          otherwise `result` will contain `entries` and `continuationToken`.
                                                                                          `entries`  gives a list of tables and the `continuationToken` is used for the next listing operation.
                                                                                          `response` will contain information related to this operation.
  - name: mergeEntity<T>(string, T, ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.mergeEntity_1
    package: azure-storage
    summary: >-
      Updates an existing entity within a table by merging new property values
      into the entity. To merge conditionally based on etag, set
      entity['.metadata']['etag'].
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function mergeEntity<T>(table: string, entityDescriptor: T, callback:
        ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the entity information.
                                                                                response` will contain information related to this operation.
  - name: mergeEntity<T>(string, T, RequestOptions, ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.mergeEntity
    package: azure-storage
    summary: >-
      Updates an existing entity within a table by merging new property values
      into the entity. To merge conditionally based on etag, set
      entity['.metadata']['etag'].
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function mergeEntity<T>(table: string, entityDescriptor: T, options?:
        RequestOptions, callback: ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the entity information.
                                                                                response` will contain information related to this operation.
  - name: >-
      queryEntities<T>(string, TableQuery, TableContinuationToken,
      ErrorOrResult<QueryEntitiesResult<T>>)
    uid: azure-storage.export=.services.table.TableService.queryEntities_1
    package: azure-storage
    summary: >-
      Queries data in a table. To retrieve a single entity by partition key and
      row key, use retrieve entity.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function queryEntities<T>(table: string, tableQuery: TableQuery,
        currentToken: TableContinuationToken, callback:
        ErrorOrResult<QueryEntitiesResult<T>>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: tableQuery
          type: TableQuery
          description: >-
            The query to perform. Use null, undefined, or new TableQuery() to
            get all of the entities in the table.
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableContinuationToken" />
          description: |-
            A continuation token returned by a previous listing operation.
                                                                                             Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.QueryEntitiesResult"
            />&lt;T&gt;&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                             otherwise `entities` will contain the entities returned by the query.
                                                                                             If more matching entities exist, and could not be returned,
                                                                                             `queryResultContinuation` will contain a continuation token that can be used
                                                                                             to retrieve the next set of results.
                                                                                             `response` will contain information related to this operation.
  - name: >-
      queryEntities<T>(string, TableQuery, TableContinuationToken,
      TableEntityRequestOptions, ErrorOrResult<QueryEntitiesResult<T>>)
    uid: azure-storage.export=.services.table.TableService.queryEntities
    package: azure-storage
    summary: >+
      Queries data in a table. To retrieve a single entity by partition key and
      row key, use retrieve entity.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var tableService = azure.createTableService();

      // tasktable should already exist and have entities


      // returns all entities in tasktable, and a continuation token for the
      next page of results if necessary

      tableService.queryEntities('tasktable', null, null /*currentToken*/,
      function(error, result) {
        if(!error) {
          var entities = result.entities;
          // do stuff with the returned entities if there are any
        }
      });


      // returns field1 and field2 of the entities in tasktable, and a
      continuation token for the next page of results if necessary

      var tableQuery = new TableQuery().select('field1', 'field2');

      tableService.queryEntities('tasktable', tableQuery, null /*currentToken*/,
      function(error, result) {
        if(!error) {
          var entities = result.entities;
          // do stuff with the returned entities if there are any
        }
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function queryEntities<T>(table: string, tableQuery: TableQuery,
        currentToken: TableContinuationToken, options?:
        TableEntityRequestOptions, callback:
        ErrorOrResult<QueryEntitiesResult<T>>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: tableQuery
          type: TableQuery
          description: >-
            The query to perform. Use null, undefined, or new TableQuery() to
            get all of the entities in the table.
        - id: currentToken
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableContinuationToken" />
          description: |-
            A continuation token returned by a previous listing operation.
                                                                                             Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableEntityRequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.QueryEntitiesResult"
            />&lt;T&gt;&gt;
          description: >-
            `error` will contain information if an error occurs;
                                                                                             otherwise `entities` will contain the entities returned by the query.
                                                                                             If more matching entities exist, and could not be returned,
                                                                                             `queryResultContinuation` will contain a continuation token that can be used
                                                                                             to retrieve the next set of results.
                                                                                             `response` will contain information related to this operation.

            The logic for returning entity types can get complicated.  Here is
            the algorithm used:

            ```

            var propertyType;


            if (propertyResovler) {                      // If the caller
            provides a propertyResolver in the options, use it
              propertyType = propertyResolver(partitionKey, rowKey, propertyName, propertyValue, propertyTypeFromService);
            } else if (propertyTypeFromService) {        // If the service
            provides us a property type, use it.  See below for an explanation
            of when this will and won't occur.
              propertyType = propertyTypeFromService;
            } else if (autoResolveProperties) {          // If
            options.autoResolveProperties is set to true
              if (javascript type is string) {           // See below for an explanation of how and why autoResolveProperties works as it does.
                propertyType = 'Edm.String';
              } else if (javascript type is boolean) {
                propertyType = 'Edm.Boolean';
              }
            }


            if (propertyType) {
              // Set the property type on the property.
            } else {
              // Property gets no EdmType.
            }

            ```

            Notes:


            * The service only provides a type if JsonFullMetadata or
            JsonMinimalMetadata is used, and if the type is Int64, Guid, Binary,
            or DateTime.

            * Explanation of autoResolveProperties:
                * String gets correctly resolved to 'Edm.String'.
                * Int64, Guid, Binary, and DateTime all get resolved to 'Edm.String.'  This only happens if JsonNoMetadata is used (otherwise the service will provide the propertyType in a prior step).
                * Boolean gets correctly resolved to 'Edm.Boolean'.
                * For both Int32 and Double, no type information is returned, even in the case of autoResolveProperties = true.  This is due to an
                     inability to distinguish between the two in certain cases.
  - name: replaceEntity<T>(string, T, ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.replaceEntity_1
    package: azure-storage
    summary: >-
      Replaces an existing entity within a table. To replace conditionally based
      on etag, set entity['.metadata']['etag'].
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function replaceEntity<T>(table: string, entityDescriptor: T, callback:
        ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the entity information.
                                                                                `response` will contain information related to this operation.
  - name: replaceEntity<T>(string, T, RequestOptions, ErrorOrResult<EntityMetadata>)
    uid: azure-storage.export=.services.table.TableService.replaceEntity
    package: azure-storage
    summary: >-
      Replaces an existing entity within a table. To replace conditionally based
      on etag, set entity['.metadata']['etag'].
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function replaceEntity<T>(table: string, entityDescriptor: T, options?:
        RequestOptions, callback: ErrorOrResult<EntityMetadata>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: entityDescriptor
          type: T
          description: The entity descriptor.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;<xref
            uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.EntityMetadata" />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                otherwise `result` will contain the entity information.
                                                                                `response` will contain information related to this operation.
  - name: retrieveEntity<T>(string, string, string, ErrorOrResult<T>)
    uid: azure-storage.export=.services.table.TableService.retrieveEntity_1
    package: azure-storage
    summary: Retrieves an entity from a table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function retrieveEntity<T>(table: string, partitionKey: string, rowKey:
        string, callback: ErrorOrResult<T>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: partitionKey
          type: string
          description: The partition key.
        - id: rowKey
          type: string
          description: The row key.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;T&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                        otherwise `result` will be the matching entity.
                                                                                        `response` will contain information related to this operation.
  - name: >-
      retrieveEntity<T>(string, string, string, TableEntityRequestOptions,
      ErrorOrResult<T>)
    uid: azure-storage.export=.services.table.TableService.retrieveEntity
    package: azure-storage
    summary: >+
      Retrieves an entity from a table.


      **Example**


      ```ts

      var azure = require('azure-storage');

      var tableService = azure.createTableService();

      tableService.retrieveEntity('tasktable', 'tasksSeattle', '1',
      function(error, serverEntity) {
        if(!error) {
          // Entity available in serverEntity variable
        }
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function retrieveEntity<T>(table: string, partitionKey: string, rowKey:
        string, options?: TableEntityRequestOptions, callback: ErrorOrResult<T>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: partitionKey
          type: string
          description: The partition key.
        - id: rowKey
          type: string
          description: The row key.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="services.table.TableService.TableEntityRequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResult&lt;T&gt;
          description: >-
            `error` will contain information if an error occurs;
                                                                                        otherwise `result` will be the matching entity.
                                                                                        `response` will contain information related to this operation.

            The logic for returning entity types can get complicated.  Here is
            the algorithm used:

            ```

            var propertyType;


            if (propertyResovler) {                      // If the caller
            provides a propertyResolver in the options, use it
              propertyType = propertyResolver(partitionKey, rowKey, propertyName, propertyValue, propertyTypeFromService);
            } else if (propertyTypeFromService) {        // If the service
            provides us a property type, use it.  See below for an explanation
            of when this will and won't occur.
              propertyType = propertyTypeFromService;
            } else if (autoResolveProperties) {          // If
            options.autoResolveProperties is set to true
              if (javascript type is string) {           // See below for an explanation of how and why autoResolveProperties works as it does.
                propertyType = 'Edm.String';
              } else if (javascript type is boolean) {
                propertyType = 'Edm.Boolean';
              }
            }


            if (propertyType) {
              // Set the property type on the property.
            } else {
              // Property gets no EdmType.
            }

            ```

            Notes:


            * The service only provides a type if JsonFullMetadata or
            JsonMinimalMetadata is used, and if the type is Int64, Guid, Binary,
            or DateTime.

            * Explanation of autoResolveProperties:
                * String gets correctly resolved to 'Edm.String'.
                * Int64, Guid, Binary, and DateTime all get resolved to 'Edm.String.'  This only happens if JsonNoMetadata is used (otherwise the service will provide the propertyType in a prior step).
                * Boolean gets correctly resolved to 'Edm.Boolean'.
                * For both Int32 and Double, no type information is returned, even in the case of autoResolveProperties = true.  This is due to an
                     inability to distinguish between the two in certain cases.
  - name: setServiceProperties(ServiceProperties, ErrorOrResponse)
    uid: azure-storage.export=.services.table.TableService.setServiceProperties_1
    package: azure-storage
    summary: >-
      Sets the properties of a storage account’s Table service, including Azure
      Storage Analytics.

      You can also use this operation to set the default request version for all
      incoming requests that do not have a version specified.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: ServiceProperties,
        callback: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.models.ServicePropertiesResult.ServiceProperties" />
          description: The service properties.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information if an error occurs;
                                                                                     `response` will contain information related to this operation.
  - name: setServiceProperties(ServiceProperties, RequestOptions, ErrorOrResponse)
    uid: azure-storage.export=.services.table.TableService.setServiceProperties
    package: azure-storage
    summary: >-
      Sets the properties of a storage account’s Table service, including Azure
      Storage Analytics.

      You can also use this operation to set the default request version for all
      incoming requests that do not have a version specified.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: ServiceProperties,
        options?: RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.models.ServicePropertiesResult.ServiceProperties" />
          description: The service properties.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: <xref uid="azure-storage.export" />=.ErrorOrResponse
          description: |-
            `error` will contain information if an error occurs;
                                                                                     `response` will contain information related to this operation.
  - name: >-
      setTableAcl(string, {[key: string]: common.AccessPolicy}, ErrorOrResult<{
      TableName: string, signedIdentifiers: {[key: string]: common.AccessPolicy}
      }>)
    uid: azure-storage.export=.services.table.TableService.setTableAcl_1
    package: azure-storage
    summary: Updates the table's ACL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setTableAcl(table: string, signedIdentifiers: {[key: string]:
        common.AccessPolicy}, callback: ErrorOrResult<{ TableName: string,
        signedIdentifiers: {[key: string]: common.AccessPolicy} }>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: signedIdentifiers
          type: >-
            {[key: string]: <xref uid="azure-storage.export" />=.<xref
            uid="common.AccessPolicy" />}
          description: The signed identifiers. Signed identifiers must be in an array.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;{ TableName:
            string, signedIdentifiers: {[key: string]: <xref
            uid="common.AccessPolicy" />} }&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                     otherwise `result` will contain information for the table.
                                                                                     `response` will contain information related to this operation.
  - name: >-
      setTableAcl(string, {[key: string]: common.AccessPolicy}, RequestOptions,
      ErrorOrResult<{ TableName: string, signedIdentifiers: {[key: string]:
      common.AccessPolicy} }>)
    uid: azure-storage.export=.services.table.TableService.setTableAcl
    package: azure-storage
    summary: Updates the table's ACL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setTableAcl(table: string, signedIdentifiers: {[key: string]:
        common.AccessPolicy}, options?: RequestOptions, callback:
        ErrorOrResult<{ TableName: string, signedIdentifiers: {[key: string]:
        common.AccessPolicy} }>)
      parameters:
        - id: table
          type: string
          description: The table name.
        - id: signedIdentifiers
          type: >-
            {[key: string]: <xref uid="azure-storage.export" />=.<xref
            uid="common.AccessPolicy" />}
          description: The signed identifiers. Signed identifiers must be in an array.
        - id: options
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.RequestOptions" />
          description: The request options.
        - id: callback
          type: >-
            <xref uid="azure-storage.export" />=.ErrorOrResult&lt;{ TableName:
            string, signedIdentifiers: {[key: string]: <xref
            uid="common.AccessPolicy" />} }&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                     otherwise `result` will contain information for the table.
                                                                                     `response` will contain information related to this operation.
  - name: withFilter(IFilter)
    uid: azure-storage.export=.services.table.TableService.withFilter
    package: azure-storage
    summary: >-
      Associate a filtering operation with this TableService. Filtering
      operations

      can include logging, automatically retrying, etc. Filter operations are
      objects

      that implement a method with the signature:

          "function handle (requestOptions, next)".

      After doing its preprocessing on the request options, the method needs to
      call

      "next" passing a callback with the following signature:

      signature:

          "function (returnObject, finalCallback, next)"

      In this callback, and after processing the returnObject (the response from
      the

      request to the server), the callback needs to either invoke next if it
      exists to

      continue processing other filters or simply invoke finalCallback otherwise
      to end

      up the service invocation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function withFilter(newFilter: IFilter): TableService'
      parameters:
        - id: newFilter
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.filters.IFilter" />
          description: ''
      return:
        description: A new service client with the filter applied.
        type: TableService
extends: >-
  <xref uid="azure-storage.export" />=.<xref
  uid="common.services.storageserviceclient.StorageServiceClient" />
